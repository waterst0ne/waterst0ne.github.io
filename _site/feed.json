{
    "version": "https://jsonfeed.org/version/1",
    "title": "waterStone blog",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "waterStone blog",
    "icon": "http://localhost:4000/assets/images/apple-touch-icon.png",
    "favicon": "http://localhost:4000/assets/images/favicon.png",
    "expired": false,
    
    "author":  {
        "name": "waterStone",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "http://localhost:4000/bdk-how-to-get-started",
            "title": "Start using and contributing to Bitcoin Dev Kit",
            "summary": null,
            "content_text": "This post is a list of resources and examples to begin using the Bitcoin Dev Kit library. Perfect for beginner/intermediate developers who want to learn the basics through BDK examples. Whether you are looking to contribute, develop, or create your own bitcoin application, this post should cover most of the fundamental information needed to get you started. This is a work in progress but should suffice for anyone looking to start learning today.What should you expect to get from this guide:  Be exposed to BDK features and library.  Hands-on tutorials in order to learn by doing.  Resources at the end of the pageGoals:  Onboard new developers, contributors, and projects.  You will be able to reproduce these to create your own custom Bitcoin wallet or app.  Supported languages: Rust, Java/Kotlin, Swift, Python and React Native.Lets get started :Easy / Intermediate Tutorials:  BDK-CLI Basics: Single-Sig Testnet transaction  BDK-CLI Basics: 2-of-3 Multi-Sig Testnet Transaction  Mastering Bitcoin Book : Bitcoin Dev Kit and BDK-CLI( 3 Wallet Examples)This tutorial comes with a video also.  BDK-CLI MiniScript Policy Decoded: : 3-of-3 multi-sig or 2-of-3 and relative-timelock          Bitcoin Developers : Learning BDK from the Command line (Youtube Video)      Advanced Tutorials:  Github Rust Examples  Rust Documents  BDK Hello World Tutorial  Hidden Powers of Miniscript Poly &amp; DescriptorsOther BDK GIT Libraries:  BDK-FFI          thunderbiscuit : BDK Language BindingsNotes for Devs &amp; Maintainers                   UNIFFI                      BDK-CLIHow to Contribute:  Contributing to BDKmd)  Jon Atack: How to Review Bitcoin Core PRs  Daniela Brozzoni: Contributing to Bitcoin - tips and tricks  Jimmy Song:A Gentle Introduction to Bitcoin Core DevelopmentBitcoin Resources  Mastering Bitcoin 2nd Edition  Chaincode Seminars for Bitcoin &amp; Lightning  Github Chaincode Curriculum  Summer of Bitcoin Blog  Thunderbiscuits BLog  Bitcoin Development Philosophy  Lopp Blog  Learn Me a Bitcoin  TimechainDemoDescriptors and Mini-Script  Descriptors  mini-script  Wiki-Script  Minsc  Output Script Descriptors  Miniscript Policy &amp; Descriptors - Hidden Powers of BitcoinPieter Wullie: MiniscriptExtra-Resources  BIP-32NET  BIP-32  BIP-39  BIP-44  BIP-84More Open-Source Bitcoin Projects:  Lightning Dev Kit",
            "content_html": "<p>This post is a list of resources and examples to begin using the <a href=\"https://bitcoindevkit.org/\">Bitcoin Dev Kit library</a>. Perfect for beginner/intermediate developers who want to learn the basics through BDK examples. Whether you are looking to contribute, develop, or create your own bitcoin application, this post should cover most of the fundamental information needed to get you started. This is a work in progress but should suffice for anyone looking to start learning today.</p><p>What should you expect to get from this guide:</p><ul>  <li>Be exposed to BDK features and library.</li>  <li>Hands-on tutorials in order to learn by doing.</li>  <li>Resources at the end of the page</li></ul><p>Goals:</p><ul>  <li>Onboard new developers, contributors, and projects.</li>  <li>You will be able to reproduce these to create your own custom Bitcoin wallet or app.</li>  <li>Supported languages: Rust, Java/Kotlin, Swift, Python and React Native.</li></ul><p>Lets get started :</p><h2 id=\"easy--intermediate-tutorials\">Easy / Intermediate Tutorials:</h2><ul>  <li><a href=\"https://waterst0ne.github.io/bdk-cli-basics/\">BDK-CLI Basics: Single-Sig Testnet transaction</a></li>  <li><a href=\"https://waterst0ne.github.io/bdk-cli-basics-multisig/\">BDK-CLI Basics: 2-of-3 Multi-Sig Testnet Transaction</a></li>  <li><a href=\"https://github.com/bitcoinbook/bitcoinbook/blob/develop/appdx-bitcoindevkit.asciidoc\">Mastering Bitcoin Book : Bitcoin Dev Kit and BDK-CLI( 3 Wallet Examples)</a></li></ul><p>This tutorial comes with a video also.</p><ul>  <li><a href=\"https://bitcoindevkit.org/tutorials/spending_policy_demo/\">BDK-CLI MiniScript Policy Decoded: : 3-of-3 multi-sig or 2-of-3 and relative-timelock</a>    <ul>      <li><a href=\"https://www.youtube.com/watch?v=-Q8OD8NCEe4&amp;t=2s\">Bitcoin Developers : Learning BDK from the Command line (Youtube Video)</a></li>    </ul>  </li></ul><h2 id=\"advanced-tutorials\">Advanced Tutorials:</h2><ul>  <li><a href=\"https://github.com/bitcoindevkit/bdk\">Github Rust Examples</a></li>  <li><a href=\"https://docs.rs/bdk/latest/bdk/\">Rust Documents</a></li>  <li><a href=\"https://bitcoindevkit.org/blog/2020/12/hello-world/\">BDK Hello World Tutorial</a></li>  <li><a href=\"https://bitcoindevkit.org/tutorials/hidden-power-of-bitcoin/\">Hidden Powers of Miniscript Poly &amp; Descriptors</a></li></ul><h3 id=\"other-bdk-git-libraries\">Other BDK GIT Libraries:</h3><ul>  <li><a href=\"https://github.com/bitcoindevkit/bdk-ffi\">BDK-FFI</a>    <ul>      <li><a href=\"https://hackmd.io/@thunderbiscuit/HJx0a5g1Sc/%2FbFseX47kRkq6OpAlajfPAw\">thunderbiscuit : BDK Language BindingsNotes for Devs &amp; Maintainers </a>        <ul>          <li><a href=\"https://github.com/mozilla/uniffi-rs\">UNIFFI</a></li>        </ul>      </li>    </ul>  </li>  <li><a href=\"https://github.com/bitcoindevkit/bdk-cli\">BDK-CLI</a></li></ul><h3 id=\"how-to-contribute\">How to Contribute:</h3><ul>  <li><a href=\"https://github.com/bitcoindevkit/bdk-cli/blob/master/CONTRIBUTING.md\">Contributing to BDK</a>md)</li>  <li><a href=\"https://github.com/jonatack/bitcoin-development/blob/master/how-to-review-bitcoin-core-prs.md\">Jon Atack: How to Review Bitcoin Core PRs</a></li>  <li><a href=\"https://danielabrozzoni.com/posts/contributing_to_oss/\">Daniela Brozzoni: Contributing to Bitcoin - tips and tricks</a></li>  <li><a href=\"https://bitcointechtalk.com/a-gentle-introduction-to-bitcoin-core-development-fdc95eaee6b8\">Jimmy Song:A Gentle Introduction to Bitcoin Core Development</a></li></ul><h3 id=\"bitcoin-resources\">Bitcoin Resources</h3><ul>  <li><a href=\"https://github.com/bitcoinbook/bitcoinbook\">Mastering Bitcoin 2nd Edition</a></li>  <li><a href=\"https://chaincode.gitbook.io/seminars/\">Chaincode Seminars for Bitcoin &amp; Lightning</a></li>  <li><a href=\"https://github.com/chaincodelabs/bitcoin-curriculum\">Github Chaincode Curriculum</a></li>  <li><a href=\"https://blog.summerofbitcoin.org/\">Summer of Bitcoin Blog</a></li>  <li><a href=\"https://thunderbiscuit.com/\">Thunderbiscuits BLog</a></li>  <li><a href=\"https://rosenbaum.se/btcphil/#readme\">Bitcoin Development Philosophy</a></li>  <li><a href=\"https://blog.lopp.net/\">Lopp Blog</a></li>  <li><a href=\"https://learnmeabitcoin.com/\">Learn Me a Bitcoin</a></li>  <li><a href=\"https://timechaindemo.io/\">TimechainDemo</a></li></ul><h3 id=\"descriptors-and-mini-script\">Descriptors and Mini-Script</h3><ul>  <li><a href=\"https://bitcoindevkit.org/descriptors/\">Descriptors</a></li>  <li><a href=\"https://bitcoin.sipa.be/miniscript/\">mini-script</a></li>  <li><a href=\"https://en.bitcoin.it/wiki/Script\">Wiki-Script</a></li>  <li><a href=\"https://min.sc/\">Minsc</a></li>  <li><a href=\"https://bitcoinops.org/en/topics/output-script-descriptors/\">Output Script Descriptors</a></li>  <li><a href=\"https://blog.summerofbitcoin.org/miniscript-policy-descriptors-hidden-powers-of-bitcoin/\">Miniscript Policy &amp; Descriptors - Hidden Powers of Bitcoin</a><a href=\"https://btctranscripts.com/stanford-blockchain-conference/2019/miniscript/\">Pieter Wullie: Miniscript</a></li></ul><h3 id=\"extra-resources\">Extra-Resources</h3><ul>  <li><a href=\"https://www.bip32.net/\">BIP-32NET</a></li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\">BIP-32</a></li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\">BIP-39</a></li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\">BIP-44</a></li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki\">BIP-84</a></li></ul><h3 id=\"more-open-source-bitcoin-projects\">More Open-Source Bitcoin Projects:</h3><ul>  <li><a href=\"https://lightningdevkit.org/\">Lightning Dev Kit</a></li></ul>",
            "url": "http://localhost:4000/bdk-how-to-get-started",
            
            
            
            "tags": ["bdk","bdk-cli","resources"],
            
            "date_published": "2022-12-16T03:00:00+03:00",
            "date_modified": "2022-12-16T03:00:00+03:00",
            
                "author": "Peter"
            
        },
    
        {
            "id": "http://localhost:4000/bdk-cli-basics-multisig/",
            "title": "BDK-CLI BASICS: 2-of-3 Multi-Signature Testnet Transaction (Tutorial)",
            "summary": null,
            "content_text": "Bitcoin Dev Kit  2-of-3 Multi-Signature Descriptor Wallet using BDK using Command-LineOverview of the tutorial  The purpose of this tutorial is to continue learning bdk-cli as our tool manage a 2 of 3 multi-signature wallet.  Generate a receive address with a spending Policy of 2 out of 3 escrow aka multi-signature.  Intro to more complex but standard policies to create custom encumberances aka custom spending conditions for transactions.Installation Pre-requisites1. Install Rust and Cargo :```$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh2. Installl sqlite3#sqlite is a database# Linux machine$ apt install sqlite-dev3# macOS machine$ brew sqlite3. Install jq# jq is a tool used for data parsing# linux machine$ apt install jq# macOS machine$ brew install jq  Note: If you need remove the cache wallet data at any time use this is the command.bdk-cli installation:$  cargo install --features \"electrum,compiler\"  --version 0.6.0 bdk-cliStep 1: Generate the XPRVs (Extended-Keys) and Save to environment variables  Create three private keys and each in their own environment variable$ export XPRV_00=$(bdk-cli key generate | jq -r '.xprv')$   export XPRV_01=$(bdk-cli key generate | jq -r '.xprv')$   export XPRV_02=$(bdk-cli key generate | jq -r '.xprv')1a: Verify XPRV environment variables are Active$ env | grep XPRVStep 2: Generate XPUBs (Extended Public Keys) &amp; Save to environment variables  Generate the three individual Public Keys aka XPUBs using our Private key and descriptor path.$ export XPUB_00=$(bdk-cli key derive --xprv $XPRV_00 --path \"m/84'/1'/0'/0\" | jq -r \".xpub\")$ export XPUB_01=$(bdk-cli key derive --xprv $XPRV_01 --path \"m/84'/1'/0'/0\" | jq -r \".xpub\")$ export XPUB_02=$(bdk-cli key derive --xprv $XPRV_02 --path \"m/84'/1'/0'/0\" | jq -r \".xpub\")2a: Verify XPUB environment variables$    env | grep XPUBStep 3: Create Single-Wallet Descriptors  Create the wallet Descriptor for each wallet$ export DESCRIPTOR_00=\"$XPRV_00/84h/1h/0h/0/*\"$ export DESCRIPTOR_01=\"$XPRV_01/84h/1h/0h/0/*\"$ export DESCRIPTOR_02=\"$XPRV_02/84h/1h/0h/0/*\"Step 4: Create Multi-Sig-Descriptor Wallets  This is how you create the 2-of-3 multi-sig output descriptor. You will need (one PrivateKey and two Xpubs) It consists of using the compiler function to parse policy to mini-script .  When creating the descriptor the order matters so be aware of that when following tutorial if you are for any reason changing the order of the policy.    Multi-Sig-Wallet 0    $ export MULTI_DESCRIPTOR_00=$(bdk-cli compile \"thresh(2,pk($DESCRIPTOR_00),pk($XPUB_01),pk($XPUB_02))\" | jq -r '.descriptor')Multi-Sig-Wallet 1  $ export MULTI_DESCRIPTOR_01=$(bdk-cli compile \"thresh(2,pk($XPUB_00),pk($DESCRIPTOR_01),pk($XPUB_02))\" | jq -r '.descriptor')Multi-Sig-Wallet 2  $  export MULTI_DESCRIPTOR_02=$(bdk-cli compile \"thresh(2,pk($XPUB_00),pk($XPUB_01),pk($DESCRIPTOR_02))\" | jq -r '.descriptor')What is Miniscript? + ResourcesMore details  Miniscript, Policy:MiniScriptMinsc is a high-level scripting languageNotes :multi-sig 2 of 3 policy gets compiled to miniscript# policythresh(2,pk(XPRV_A),pk(XPUB_B),pk(XPUB_C)) # miniscriptwsh(multi(2,XPRV_KEY,PUBKEY_B,XPUB_C))4a: Verify Multi-Sig-Descriptor environment variables are active$ env | grep MULTIStep 5: Generate Receive Address by using Multi-Sig-Descriptor Wallets$ bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 get_new_address$ bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 get_new_address$ bdk-cli wallet --wallet wallet_name_msd02 --descriptor $MULTI_DESCRIPTOR_02 get_new_address  Did you generate the same address for all three? Good! Else, something might be incorrect.Step 6: Send Testnet Bitcoin to the newly created receive-addressBitcoin Testnet Faucet link:1Bitcoin Testnet Faucet link:2Step 7: Sync one of the Multi-Sig Wallets$ ` bdk-cli wallet –wallet wallet_name_msd00 –descriptor $MULTI_DESCRIPTOR_00 sync`Step 8: Check Balance Multi-Sig Wallets$ ` bdk-cli wallet –wallet wallet_name_msd00 –descriptor $MULTI_DESCRIPTOR_00 get_balance`  Every wallet has access to sync and view balance.Step 9: Check Multi-Sig Policies on Descriptor Wallet$ bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 policies:::info:+1: The output below confirms the command was successful.::::{  \"external\": {    \"contribution\": {      \"conditions\": {        \"0\": [          {}        ]      },      \"items\": [        0      ],      \"m\": 2,      \"n\": 3,      \"sorted\": false,      \"type\": \"PARTIAL\"    },    \"id\": \"seaxtqqn\",    \"keys\": [      {        \"fingerprint\": \"7cdf2d46\"      },      {        \"fingerprint\": \"fc7870cd\"      },      {        \"fingerprint\": \"26b03333\"      }    ],    \"satisfaction\": {      \"items\": [],      \"m\": 2,      \"n\": 3,      \"sorted\": false,      \"type\": \"PARTIAL\"    },    \"threshold\": 2,    \"type\": \"MULTISIG\"  },  \"internal\": null}### SpendingPolicyRequired for complex descriptors --external_policy \"{\\\"seaxtqqn\\\": [0,1]}\"     &lt;-rootnode-&gt;&lt;children #0 and #1 of root node&gt;  Save the “id”: We will need to use this ‘‘id’’ later.  More info on external here create_tx &gt; external policiesStep 10: Create a Transaction (PSBT)  1st Create a PSBT using the first wallet  2nd Sign the PSBT with the first wallet  3rd  Sign PSBT with the second wallet  Broadcast PSBTCreate TXN and Export UNSIGNED_PSBT to environment variable$ export UNSIGNED_PSBT=$(bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 create_tx --send_all --to mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt:0 --external_policy \"{\\\"CHANGE_ID_HERE\\\": [0,1]}\" | jq -r '.psbt')Verify UNSIGNED_PSBT  environment variable$ env | grep UNSIGNEDStep 11: SIGN the Transaction1st Wallet Signs the transaction$ bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 sign --psbt $UNSIGNED_PSBT$ export ONESIG_PSBT=$(bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 sign --psbt $UNSIGNED_PSBT | jq -r '.psbt')$env | grep ONESIG{  \"is_finalized\": false,  \"psbt\": \"cHNidP8BAFUBAAAAAdYCtva/7Rkt+fgFu3mxAdaPh4uTbgBL3HmYZgcEKWygAAAAAAD/////AQqGAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA6gIAAAAAAQFLyGFJFK884DGBM1WgskRZ6gKp/7oZ+Z30u0+wF3pZYAEAAAAA/v///wKghgEAAAAAACIAINHcOQLE6GpJ3J+FOzn/be+HApxW8sZtGqfA3TBW+NYX91hoOAAAAAAWABTPQDZx2wYYIn+ug2pZBmWBn0Tu/gJHMEQCIHu6GmRMDgPZyTx+klFMA9VujR3qDA/Y08kSkRvOaChjAiBAtExtGAYLuQ/DDJzCqLlNZ1bMB3MV+nxsLfTdI9YcYwEhA0b8lz+kt0xHfR/tjUKOc2Nt2L61pDd5vJ/lsKi8pw9MmFUjAAEBK6CGAQAAAAAAIgAg0dw5AsToakncn4U7Of9t74cCnFbyxm0ap8DdMFb41hciAgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDUgwRQIhAJdILr7G3UzYylyr2fA13MFsz/jG4+iZlKeEkX79d082AiA99UF0/uFyXBVNUmuGaxdHL7wlhzqfbgGLMREN0z/O6QEBBWlSIQIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDSEDzsDXexRPSxeXiLJoS0i2fQlOoOGHmo+Dhaeaq3oHV6YhAjGKA2Dqg+QeMICBAifYslQF2WrehLEQ0iEOpp/+eQ0NU64iBgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDRh83y1GVAAAgAEAAIAAAACAAAAAAAAAAAAiBgIxigNg6oPkHjCAgQIn2LJUBdlq3oSxENIhDqaf/nkNDRgmsDMzVAAAgAEAAIAAAACAAAAAAAAAAAAiBgPOwNd7FE9LF5eIsmhLSLZ9CU6g4Yeaj4OFp5qregdXphj8eHDNVAAAgAEAAIAAAACAAAAAAAAAAAAAAA==\"}2nd Wallet Signs the transaction$ bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 sign --psbt $ONESIG_PSBT$ export SECONDSIG_PSBT=$(bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 sign --psbt $ONESIG_PSBT | jq -r '.psbt')$env | grep SECONDSIG{  \"is_finalized\": true,  \"psbt\": \"cHNidP8BAFUBAAAAAdYCtva/7Rkt+fgFu3mxAdaPh4uTbgBL3HmYZgcEKWygAAAAAAD/////AQqGAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA6gIAAAAAAQFLyGFJFK884DGBM1WgskRZ6gKp/7oZ+Z30u0+wF3pZYAEAAAAA/v///wKghgEAAAAAACIAINHcOQLE6GpJ3J+FOzn/be+HApxW8sZtGqfA3TBW+NYX91hoOAAAAAAWABTPQDZx2wYYIn+ug2pZBmWBn0Tu/gJHMEQCIHu6GmRMDgPZyTx+klFMA9VujR3qDA/Y08kSkRvOaChjAiBAtExtGAYLuQ/DDJzCqLlNZ1bMB3MV+nxsLfTdI9YcYwEhA0b8lz+kt0xHfR/tjUKOc2Nt2L61pDd5vJ/lsKi8pw9MmFUjAAEBK6CGAQAAAAAAIgAg0dw5AsToakncn4U7Of9t74cCnFbyxm0ap8DdMFb41hciAgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDUgwRQIhAJdILr7G3UzYylyr2fA13MFsz/jG4+iZlKeEkX79d082AiA99UF0/uFyXBVNUmuGaxdHL7wlhzqfbgGLMREN0z/O6QEiAgPOwNd7FE9LF5eIsmhLSLZ9CU6g4Yeaj4OFp5qregdXpkgwRQIhAO2aRERcublhAzToshkZRMg2I8GaE7mM2ECr0vYyuscmAiB5KK4ETlvrLqL0QbcRbGqrSwIa9lVuOqP3f5qCnGRMaQEBBWlSIQIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDSEDzsDXexRPSxeXiLJoS0i2fQlOoOGHmo+Dhaeaq3oHV6YhAjGKA2Dqg+QeMICBAifYslQF2WrehLEQ0iEOpp/+eQ0NU64iBgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDRh83y1GVAAAgAEAAIAAAACAAAAAAAAAAAAiBgIxigNg6oPkHjCAgQIn2LJUBdlq3oSxENIhDqaf/nkNDRgmsDMzVAAAgAEAAIAAAACAAAAAAAAAAAAiBgPOwNd7FE9LF5eIsmhLSLZ9CU6g4Yeaj4OFp5qregdXphj8eHDNVAAAgAEAAIAAAACAAAAAAAAAAAABBwABCP3+AAQASDBFAiEAl0guvsbdTNjKXKvZ8DXcwWzP+Mbj6JmUp4SRfv13TzYCID31QXT+4XJcFU1Sa4ZrF0cvvCWHOp9uAYsxEQ3TP87pAUgwRQIhAO2aRERcublhAzToshkZRMg2I8GaE7mM2ECr0vYyuscmAiB5KK4ETlvrLqL0QbcRbGqrSwIa9lVuOqP3f5qCnGRMaQFpUiECI1AiHZ8q+qw7bjYVTbeGQQ3L2C2sH6CW82z8sXP1jQ0hA87A13sUT0sXl4iyaEtItn0JTqDhh5qPg4Wnmqt6B1emIQIxigNg6oPkHjCAgQIn2LJUBdlq3oSxENIhDqaf/nkNDVOuAAA=\"}Step 12: Broadcast Transaction$ bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 broadcast --psbt $SECONDSIG_PSBT{  \"txid\": \"61da2451874a483aa8d1d0787c7680d157639f284840de8885098cac43f6cc2f\"}Verify Transaction  Verify transcation in the memory pool on testnet Mempool-testnet!",
            "content_html": "<h2 id=\"bitcoin-dev-kit--2-of-3-multi-signature-descriptor-wallet-using-bdk-using-command-line\">Bitcoin Dev Kit  2-of-3 Multi-Signature Descriptor Wallet using BDK using Command-Line</h2><h2 id=\"overview-of-the-tutorial\">Overview of the tutorial</h2><ul>  <li>The purpose of this tutorial is to continue learning <code class=\"language-plaintext highlighter-rouge\">bdk-cli</code> as our tool manage a 2 of 3 multi-signature wallet.</li>  <li>Generate a receive address with a spending Policy of 2 out of 3 escrow aka multi-signature.</li>  <li>Intro to more complex but standard policies to create custom encumberances aka custom spending conditions for transactions.</li></ul><hr /><h2 id=\"installation-pre-requisites\">Installation Pre-requisites</h2><h3 id=\"1-install-rust-and-cargo-\">1. Install Rust and Cargo :```</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></pre></div></div><h3 id=\"2-installl-sqlite3\">2. Installl <code class=\"language-plaintext highlighter-rouge\">sqlite3</code></h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#sqlite is a database# Linux machine$ apt install sqlite-dev3# macOS machine$ brew sqlite</code></pre></div></div><h3 id=\"3-install-jq\">3. Install <code class=\"language-plaintext highlighter-rouge\">jq</code></h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># jq is a tool used for data parsing# linux machine$ apt install jq# macOS machine$ brew install jq</code></pre></div></div><blockquote>  <p>Note: If you need remove the cache wallet data at any time use this is the command.</p></blockquote><hr /><h3 id=\"bdk-cli-installation\"><code class=\"language-plaintext highlighter-rouge\">bdk-cli</code> installation:</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$  cargo install --features \"electrum,compiler\"  --version 0.6.0 bdk-cli</code></pre></div></div><hr /><h2 id=\"step-1-generate-the-xprvs-extended-keys-and-save-to-environment-variables\">Step 1: Generate the XPRVs (Extended-Keys) and Save to environment variables</h2><blockquote>  <p>Create three private keys and each in their own environment variable</p></blockquote><p>$ <code class=\"language-plaintext highlighter-rouge\">export XPRV_00=$(bdk-cli key generate | jq -r '.xprv')</code></p><p>$   <code class=\"language-plaintext highlighter-rouge\">export XPRV_01=$(bdk-cli key generate | jq -r '.xprv')</code></p><p>$   <code class=\"language-plaintext highlighter-rouge\">export XPRV_02=$(bdk-cli key generate | jq -r '.xprv')</code></p><p><img src=\"https://i.imgur.com/FwgUdwK.gif\" alt=\"\" /></p><h3 id=\"1a-verify-xprv-environment-variables-are-active\">1a: Verify XPRV environment variables are Active</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">env | grep XPRV</code></p><p><img src=\"https://i.imgur.com/ZerGPbO.gif\" alt=\"\" /></p><hr /><h2 id=\"step-2-generate-xpubs-extended-public-keys--save-to-environment-variables\">Step 2: Generate XPUBs (Extended Public Keys) &amp; Save to environment variables</h2><blockquote>  <p>Generate the three individual Public Keys aka XPUBs using our Private key and descriptor path.</p></blockquote><p>$ <code class=\"language-plaintext highlighter-rouge\">export XPUB_00=$(bdk-cli key derive --xprv $XPRV_00 --path \"m/84'/1'/0'/0\" | jq -r \".xpub\")</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">export XPUB_01=$(bdk-cli key derive --xprv $XPRV_01 --path \"m/84'/1'/0'/0\" | jq -r \".xpub\")</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">export XPUB_02=$(bdk-cli key derive --xprv $XPRV_02 --path \"m/84'/1'/0'/0\" | jq -r \".xpub\")</code></p><p><img src=\"https://i.imgur.com/xT3KRh4.gif\" alt=\"\" /></p><h3 id=\"2a-verify-xpub-environment-variables\">2a: Verify XPUB environment variables</h3><p>$    <code class=\"language-plaintext highlighter-rouge\">env | grep XPUB</code></p><p><img src=\"https://i.imgur.com/SzAip9E.gif\" alt=\"\" /></p><hr /><h2 id=\"step-3-create-single-wallet-descriptors\">Step 3: Create Single-Wallet Descriptors</h2><blockquote>  <p>Create the wallet Descriptor for each wallet</p></blockquote><p>$ <code class=\"language-plaintext highlighter-rouge\">export DESCRIPTOR_00=\"$XPRV_00/84h/1h/0h/0/*\"</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">export DESCRIPTOR_01=\"$XPRV_01/84h/1h/0h/0/*\"</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">export DESCRIPTOR_02=\"$XPRV_02/84h/1h/0h/0/*\"</code></p><p><img src=\"https://i.imgur.com/mFrWt6b.png\" alt=\"\" /></p><hr /><h2 id=\"step-4-create-multi-sig-descriptor-wallets\">Step 4: Create Multi-Sig-Descriptor Wallets</h2><blockquote>  <p>This is how you create the 2-of-3 multi-sig output descriptor. You will need (one PrivateKey and two Xpubs) It consists of using the <code class=\"language-plaintext highlighter-rouge\">compiler</code> function to parse <code class=\"language-plaintext highlighter-rouge\">policy</code> to <code class=\"language-plaintext highlighter-rouge\">mini-script</code> .</p></blockquote><ul class=\"task-list\">  <li>When creating the descriptor the order matters so be aware of that when following tutorial if you are for any reason changing the order of the policy.    <h4 id=\"multi-sig-wallet-0\">Multi-Sig-Wallet 0</h4>  </li>  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />$ <code class=\"language-plaintext highlighter-rouge\">export MULTI_DESCRIPTOR_00=$(bdk-cli compile \"thresh(2,pk($DESCRIPTOR_00),pk($XPUB_01),pk($XPUB_02))\" | jq -r '.descriptor')</code></li></ul><h4 id=\"multi-sig-wallet-1\">Multi-Sig-Wallet 1</h4><ul class=\"task-list\">  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />$ <code class=\"language-plaintext highlighter-rouge\">export MULTI_DESCRIPTOR_01=$(bdk-cli compile \"thresh(2,pk($XPUB_00),pk($DESCRIPTOR_01),pk($XPUB_02))\" | jq -r '.descriptor')</code></li></ul><h4 id=\"multi-sig-wallet-2\">Multi-Sig-Wallet 2</h4><ul class=\"task-list\">  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />$  <code class=\"language-plaintext highlighter-rouge\">export MULTI_DESCRIPTOR_02=$(bdk-cli compile \"thresh(2,pk($XPUB_00),pk($XPUB_01),pk($DESCRIPTOR_02))\" | jq -r '.descriptor')</code></li></ul><p><img src=\"https://i.imgur.com/Yb8RmFS.gif\" alt=\"\" /></p><p>What is <strong>Miniscript?</strong> + Resources</p><p>More details  <strong>Miniscript</strong>, Policy:</p><p><a href=\"https://bitcoin.sipa.be/miniscript/\">MiniScript</a></p><p><a href=\"https://min.sc\">Minsc is a high-level scripting language</a></p><p>Notes :</p><h4 id=\"multi-sig-2-of-3-policy-gets-compiled-to-miniscript\">multi-sig 2 of 3 policy gets compiled to miniscript</h4><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># policythresh(2,pk(XPRV_A),pk(XPUB_B),pk(XPUB_C)) # miniscriptwsh(multi(2,XPRV_KEY,PUBKEY_B,XPUB_C))</code></pre></div></div><h3 id=\"4a-verify-multi-sig-descriptor-environment-variables-are-active\">4a: Verify Multi-Sig-Descriptor environment variables are active</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">env | grep MULTI</code></p><p><img src=\"https://i.imgur.com/aAgtlsi.gif\" alt=\"\" /></p><hr /><h2 id=\"step-5-generate-receive-address-by-using-multi-sig-descriptor-wallets\">Step 5: Generate Receive Address by using Multi-Sig-Descriptor Wallets</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 get_new_address</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 get_new_address</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name_msd02 --descriptor $MULTI_DESCRIPTOR_02 get_new_address</code></p><p><img src=\"https://i.imgur.com/w1fxPSn.gif\" alt=\"\" /></p><blockquote>  <p>Did you generate the same address for all three? Good! Else, something might be incorrect.</p></blockquote><hr /><h2 id=\"step-6-send-testnet-bitcoin-to-the-newly-created-receive-address\">Step 6: Send Testnet Bitcoin to the newly created receive-address</h2><p><a href=\"https://testnet-faucet.mempool.co\">Bitcoin Testnet Faucet link:1</a><a href=\"https://bitcoinfaucet.uo1.net\">Bitcoin Testnet Faucet link:2</a></p><hr /><h2 id=\"step-7-sync-one-of-the-multi-sig-wallets\">Step 7: Sync one of the Multi-Sig Wallets</h2><p>$ ` bdk-cli wallet –wallet wallet_name_msd00 –descriptor $MULTI_DESCRIPTOR_00 sync`</p><p><img src=\"https://i.imgur.com/GuefgeI.gif\" alt=\"\" /></p><hr /><h2 id=\"step-8-check-balance-multi-sig-wallets\">Step 8: Check Balance Multi-Sig Wallets</h2><p>$ ` bdk-cli wallet –wallet wallet_name_msd00 –descriptor $MULTI_DESCRIPTOR_00 get_balance`</p><p><img src=\"https://i.imgur.com/zNciCqF.gif\" alt=\"\" /></p><ul>  <li>Every wallet has access to sync and view balance.</li></ul><hr /><h2 id=\"step-9-check-multi-sig-policies-on-descriptor-wallet\">Step 9: Check Multi-Sig Policies on Descriptor Wallet</h2><p>$<code class=\"language-plaintext highlighter-rouge\"> bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 policies</code></p><p>:::info:+1: The output below confirms the command was successful.::::</p><div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">{</span>  <span class=\"s2\">\"external\"</span>: <span class=\"o\">{</span>    <span class=\"s2\">\"contribution\"</span>: <span class=\"o\">{</span>      <span class=\"s2\">\"conditions\"</span>: <span class=\"o\">{</span>        <span class=\"s2\">\"0\"</span>: <span class=\"o\">[</span>          <span class=\"o\">{}</span>        <span class=\"o\">]</span>      <span class=\"o\">}</span>,      <span class=\"s2\">\"items\"</span>: <span class=\"o\">[</span>        0      <span class=\"o\">]</span>,      <span class=\"s2\">\"m\"</span>: 2,      <span class=\"s2\">\"n\"</span>: 3,      <span class=\"s2\">\"sorted\"</span>: <span class=\"nb\">false</span>,      <span class=\"s2\">\"type\"</span>: <span class=\"s2\">\"PARTIAL\"</span>    <span class=\"o\">}</span>,    <span class=\"s2\">\"id\"</span>: <span class=\"s2\">\"seaxtqqn\"</span>,    <span class=\"s2\">\"keys\"</span>: <span class=\"o\">[</span>      <span class=\"o\">{</span>        <span class=\"s2\">\"fingerprint\"</span>: <span class=\"s2\">\"7cdf2d46\"</span>      <span class=\"o\">}</span>,      <span class=\"o\">{</span>        <span class=\"s2\">\"fingerprint\"</span>: <span class=\"s2\">\"fc7870cd\"</span>      <span class=\"o\">}</span>,      <span class=\"o\">{</span>        <span class=\"s2\">\"fingerprint\"</span>: <span class=\"s2\">\"26b03333\"</span>      <span class=\"o\">}</span>    <span class=\"o\">]</span>,    <span class=\"s2\">\"satisfaction\"</span>: <span class=\"o\">{</span>      <span class=\"s2\">\"items\"</span>: <span class=\"o\">[]</span>,      <span class=\"s2\">\"m\"</span>: 2,      <span class=\"s2\">\"n\"</span>: 3,      <span class=\"s2\">\"sorted\"</span>: <span class=\"nb\">false</span>,      <span class=\"s2\">\"type\"</span>: <span class=\"s2\">\"PARTIAL\"</span>    <span class=\"o\">}</span>,    <span class=\"s2\">\"threshold\"</span>: 2,    <span class=\"s2\">\"type\"</span>: <span class=\"s2\">\"MULTISIG\"</span>  <span class=\"o\">}</span>,  <span class=\"s2\">\"internal\"</span>: null<span class=\"o\">}</span></code></pre></div></div><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>### SpendingPolicyRequired for complex descriptors --external_policy \"{\\\"seaxtqqn\\\": [0,1]}\"     &lt;-rootnode-&gt;&lt;children #0 and #1 of root node&gt;</code></pre></div></div><blockquote>  <p>Save the “id”: We will need to use this ‘‘id’’ later.</p></blockquote><ul class=\"task-list\">  <li class=\"task-list-item\"><input type=\"checkbox\" class=\"task-list-item-checkbox\" disabled=\"disabled\" />More info on external here <a href=\"https://bitcoindevkit.org/bdk-cli/interface/\">create_tx &gt; external policies</a></li></ul><hr /><h2 id=\"step-10-create-a-transaction-psbt\">Step 10: Create a Transaction (PSBT)</h2><ul>  <li>1st Create a PSBT using the first wallet</li>  <li>2nd Sign the PSBT with the first wallet</li>  <li>3rd  Sign PSBT with the second wallet</li>  <li>Broadcast PSBT</li></ul><h3 id=\"create-txn-and-export-unsigned_psbt-to-environment-variable\">Create TXN and Export UNSIGNED_PSBT to environment variable</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">export UNSIGNED_PSBT=$(bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 create_tx --send_all --to mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt:0 --external_policy \"{\\\"CHANGE_ID_HERE\\\": [0,1]}\" | jq -r '.psbt')</code></p><h3 id=\"verify-unsigned_psbt--environment-variable\">Verify UNSIGNED_PSBT  environment variable</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">env | grep UNSIGNED</code><img src=\"https://i.imgur.com/djHaRDq.gif\" alt=\"\" /></p><hr /><h2 id=\"step-11-sign-the-transaction\">Step 11: SIGN the Transaction</h2><h3 id=\"1st-wallet-signs-the-transaction\">1st Wallet Signs the transaction</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 sign --psbt $UNSIGNED_PSBT</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">export ONESIG_PSBT=$(bdk-cli wallet --wallet wallet_name_msd00 --descriptor $MULTI_DESCRIPTOR_00 sign --psbt $UNSIGNED_PSBT | jq -r '.psbt')</code></p><p>$<code class=\"language-plaintext highlighter-rouge\">env | grep ONESIG</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{  \"is_finalized\": false,  \"psbt\": \"cHNidP8BAFUBAAAAAdYCtva/7Rkt+fgFu3mxAdaPh4uTbgBL3HmYZgcEKWygAAAAAAD/////AQqGAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA6gIAAAAAAQFLyGFJFK884DGBM1WgskRZ6gKp/7oZ+Z30u0+wF3pZYAEAAAAA/v///wKghgEAAAAAACIAINHcOQLE6GpJ3J+FOzn/be+HApxW8sZtGqfA3TBW+NYX91hoOAAAAAAWABTPQDZx2wYYIn+ug2pZBmWBn0Tu/gJHMEQCIHu6GmRMDgPZyTx+klFMA9VujR3qDA/Y08kSkRvOaChjAiBAtExtGAYLuQ/DDJzCqLlNZ1bMB3MV+nxsLfTdI9YcYwEhA0b8lz+kt0xHfR/tjUKOc2Nt2L61pDd5vJ/lsKi8pw9MmFUjAAEBK6CGAQAAAAAAIgAg0dw5AsToakncn4U7Of9t74cCnFbyxm0ap8DdMFb41hciAgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDUgwRQIhAJdILr7G3UzYylyr2fA13MFsz/jG4+iZlKeEkX79d082AiA99UF0/uFyXBVNUmuGaxdHL7wlhzqfbgGLMREN0z/O6QEBBWlSIQIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDSEDzsDXexRPSxeXiLJoS0i2fQlOoOGHmo+Dhaeaq3oHV6YhAjGKA2Dqg+QeMICBAifYslQF2WrehLEQ0iEOpp/+eQ0NU64iBgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDRh83y1GVAAAgAEAAIAAAACAAAAAAAAAAAAiBgIxigNg6oPkHjCAgQIn2LJUBdlq3oSxENIhDqaf/nkNDRgmsDMzVAAAgAEAAIAAAACAAAAAAAAAAAAiBgPOwNd7FE9LF5eIsmhLSLZ9CU6g4Yeaj4OFp5qregdXphj8eHDNVAAAgAEAAIAAAACAAAAAAAAAAAAAAA==\"}</code></pre></div></div><p><img src=\"https://i.imgur.com/0w4sK5y.gif\" alt=\"\" /></p><hr /><h3 id=\"2nd-wallet-signs-the-transaction\">2nd Wallet Signs the transaction</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 sign --psbt $ONESIG_PSBT</code></p><p>$ <code class=\"language-plaintext highlighter-rouge\">export SECONDSIG_PSBT=$(bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 sign --psbt $ONESIG_PSBT | jq -r '.psbt')</code></p><p>$<code class=\"language-plaintext highlighter-rouge\">env | grep SECONDSIG</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{  \"is_finalized\": true,  \"psbt\": \"cHNidP8BAFUBAAAAAdYCtva/7Rkt+fgFu3mxAdaPh4uTbgBL3HmYZgcEKWygAAAAAAD/////AQqGAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA6gIAAAAAAQFLyGFJFK884DGBM1WgskRZ6gKp/7oZ+Z30u0+wF3pZYAEAAAAA/v///wKghgEAAAAAACIAINHcOQLE6GpJ3J+FOzn/be+HApxW8sZtGqfA3TBW+NYX91hoOAAAAAAWABTPQDZx2wYYIn+ug2pZBmWBn0Tu/gJHMEQCIHu6GmRMDgPZyTx+klFMA9VujR3qDA/Y08kSkRvOaChjAiBAtExtGAYLuQ/DDJzCqLlNZ1bMB3MV+nxsLfTdI9YcYwEhA0b8lz+kt0xHfR/tjUKOc2Nt2L61pDd5vJ/lsKi8pw9MmFUjAAEBK6CGAQAAAAAAIgAg0dw5AsToakncn4U7Of9t74cCnFbyxm0ap8DdMFb41hciAgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDUgwRQIhAJdILr7G3UzYylyr2fA13MFsz/jG4+iZlKeEkX79d082AiA99UF0/uFyXBVNUmuGaxdHL7wlhzqfbgGLMREN0z/O6QEiAgPOwNd7FE9LF5eIsmhLSLZ9CU6g4Yeaj4OFp5qregdXpkgwRQIhAO2aRERcublhAzToshkZRMg2I8GaE7mM2ECr0vYyuscmAiB5KK4ETlvrLqL0QbcRbGqrSwIa9lVuOqP3f5qCnGRMaQEBBWlSIQIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDSEDzsDXexRPSxeXiLJoS0i2fQlOoOGHmo+Dhaeaq3oHV6YhAjGKA2Dqg+QeMICBAifYslQF2WrehLEQ0iEOpp/+eQ0NU64iBgIjUCIdnyr6rDtuNhVNt4ZBDcvYLawfoJbzbPyxc/WNDRh83y1GVAAAgAEAAIAAAACAAAAAAAAAAAAiBgIxigNg6oPkHjCAgQIn2LJUBdlq3oSxENIhDqaf/nkNDRgmsDMzVAAAgAEAAIAAAACAAAAAAAAAAAAiBgPOwNd7FE9LF5eIsmhLSLZ9CU6g4Yeaj4OFp5qregdXphj8eHDNVAAAgAEAAIAAAACAAAAAAAAAAAABBwABCP3+AAQASDBFAiEAl0guvsbdTNjKXKvZ8DXcwWzP+Mbj6JmUp4SRfv13TzYCID31QXT+4XJcFU1Sa4ZrF0cvvCWHOp9uAYsxEQ3TP87pAUgwRQIhAO2aRERcublhAzToshkZRMg2I8GaE7mM2ECr0vYyuscmAiB5KK4ETlvrLqL0QbcRbGqrSwIa9lVuOqP3f5qCnGRMaQFpUiECI1AiHZ8q+qw7bjYVTbeGQQ3L2C2sH6CW82z8sXP1jQ0hA87A13sUT0sXl4iyaEtItn0JTqDhh5qPg4Wnmqt6B1emIQIxigNg6oPkHjCAgQIn2LJUBdlq3oSxENIhDqaf/nkNDVOuAAA=\"}</code></pre></div></div><p><img src=\"https://i.imgur.com/OdLHnJ3.gif\" alt=\"\" /></p><hr /><h2 id=\"step-12-broadcast-transaction\">Step 12: Broadcast Transaction</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name_msd01 --descriptor $MULTI_DESCRIPTOR_01 broadcast --psbt $SECONDSIG_PSBT</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{  \"txid\": \"61da2451874a483aa8d1d0787c7680d157639f284840de8885098cac43f6cc2f\"}</code></pre></div></div><p><img src=\"https://i.imgur.com/M7s0Fd6.gif\" alt=\"\" /></p><h3 id=\"verify-transaction\">Verify Transaction</h3><ul>  <li>Verify transcation in the memory pool on testnet <a href=\"https://mempool.space/testnet\">Mempool-testnet!</a></li></ul>",
            "url": "http://localhost:4000/bdk-cli-basics-multisig/",
            
            
            
            "tags": ["bdk","bdk-cli","tutorial","multi-sig"],
            
            "date_published": "2022-12-15T03:00:00+03:00",
            "date_modified": "2022-12-15T03:00:00+03:00",
            
                "author": "Peter"
            
        },
    
        {
            "id": "http://localhost:4000/bdk-cli-basics/",
            "title": "BDK-CLI BASICS: Single-Signature Testnet Transaction (Tutorial)",
            "summary": null,
            "content_text": "How to use bdk-cli basicsTutorial Goals  My goal for this tutorial is to introduce you to bdk-cli, a powerful command-line program used for Bitcoin wallet testing. You will be exposed to many of the basic techincal skills that go into creating and managing Bitcoin wallets.      If you’ve read most of the “Mastering Bitcoin” book, this tutorial could serve as a stepping stone into your Bitcoin wallet development journey.        This short tutorial will expose you to the bdk library  and the practical knowledge needed for Bitcoin wallet development.    You can create a custom modular wallet by using the Language Bindings for Kotlin/Java, Swift, Python which enable the use of BDK’s Rust library as an API. You can later use these similar steps to create your own Bitcoin mobile, desktop or even WebApp.***A few things before you begin:  Run this command to clear cache.This command is not needed if it’s your first time of using the bdk-cli.This command clears the cache files located in the bdk-cli folder. rm -rf ~/.bdk-cli/  Three things to look out for in each step of the tutorial:          1) Commands for the Terminal or Shell start with the $ symbol      2) Preview of the command output. Note, not all commands will output code.      3) Preview Video of the tutorial for reference of what things should look like in action.      Outline of Tutorial and Installation notes:Brief Outline of Tutorial  Step 1: Creating a mnemonic word list + XPRV (Extended Private Key)  Step 2: Generate testnet Receive Address  Step 3: Send funds to newly generated address  Step 4: Sync Wallet  Step 5: Check Balance of Wallet  Step 6: Create a Transaction (PSBT)  Step 7: Sign the Transaction (PSBT)  Step 8: Broadcast TransactionTo follow this tutorial you will need:  Linux or macOS device.  If on Windows instructions will slightly differ.Installation Pre-requisites1. Install Rust and Cargo :```$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh2. Installl sqlite3#sqlite is a database# Linux machine$ apt install sqlite-dev3# macOS machine$ brew sqlite3. Install jq# jq is a tool used for data parsing# linux machine$ apt install jq# macOS machine$ brew install jq  Note: If you need remove the cache wallet data at any time use this is the command.bdk-cli installation:$  cargo install --features \"electrum,compiler\"  --version 0.6.0 bdk-cliStep 0: Check Version of bdk-cli$ bdk-cli -V# command output previewbdk-cli 0.5.0Preview of bdk-cli help menu$bdk-cli --help# command output previewUSAGE:    bdk-cli [OPTIONS] &lt;SUBCOMMAND&gt;FLAGS:    -h, --help                   Prints help information    -V, --version                Prints version informationOPTIONS:    -d, --datadir &lt;DATADIR&gt;                Sets the wallet data directory. Default value : \"~/.bdk-bitcoin    -n, --network &lt;NETWORK&gt;                Sets the network [default: testnet]  [possible values: bitcoin, testnet, signet, regtest]SUBCOMMANDS:    compile    Compile a miniscript policy to an output descriptor    help       Prints this message or the help of the given subcommand(s)    key        Subcommands for Key operations    repl       Options to configure a SOCKS5 proxy for a blockchain client connection    wallet     Wallet subcommands that can be issued without a blockchain backendStep 1: Seed Generate1a: Mnemonic word-list + XPRV (Exteneded Private Key) :key:$ bdk-cli key generate | tee key.json{  \"fingerprint\": \"42b15d2f\",  \"mnemonic\": \"party salon worth satoshi envelope suggest garlic dry add pitch throw clap keen narrow antique oyster ketchup purchase gasp visual work venue fog crater\",  \"xprv\": \"tprv8ZgxMBicQKsPdwpamtjqMFpYRTafnE1bN2SphLEybCtRKakk6S1TgQCsZgiBwJuJNWe3jYdgVCTsKf9weMxj6tW4zNNKWptykszJpS2L8wE\"}1b: Save XPRV (Extended Private Key) into environment variable$ export XPRV_00=$(cat key.json | jq -r .xprv)1c: Verify environment variable XPRV_00 is active$ env | grep XPRV1d: Create Descriptor and Save into environment variable$ export my_descriptor=\"wpkh($XPRV_00/84h/1h/0h/0/*)\"1e: Verify environment variable my_descriptor is active$ env | grep my_descriptorStep 2: Generate Receive-Address$ bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor get_new_address The output below confirms the command was successful.{  \"address\": \"tb1qrh4sq5va0unqtxyfv8al9lz3sna3988cj59uya\"}Note: If you get the error below just delete the folder cache.$ rm -rf ~/./bdk_cli/### ERROR PREVIEW [2022-12-16T04:12:26Z ERROR bdk_cli] Descriptor checksum mismatch. Are you using a different descriptor for an already defined wallet name? (if you are not specifying the wallet name it is automatically named based on the descriptor)This erases the cache files located in the bdk-cli binary folder.Note: This happens when you name the wallet the same name as previous created wallet.Step 3: Send testnet bitcoin to the newly created receive-addressThese Testnet faucets allow you to send funds to your newly created address.  Bitcoin Testnet Faucet LINK#1  Bitcoin Testnet Faucet LINK#2Step 4: Sync the wallet$ bdk-cli wallet --wallet wallet_name  --descriptor $my_descriptor syncThe output below confirms the command was successful.{}Step 5: Check the balance$ bdk-cli wallet --wallet wallet_name  --descriptor $my_descriptor get_balance   Note: The balance will only show after the transaction has been confirmed in a block at least once.The output below confirms the command was successful:{  \"satoshi\": 100000}Step 6: Create Transaction (PSBT)To create a PSBT (partially-signed-bitcoin-transaction) run  the command$ bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor create_tx --to mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt:50000 The output below confirms the command was successful.{  \"details\": {    \"confirmation_time\": null,    \"fee\": 113,    \"received\": 0,    \"sent\": 123000,    \"transaction\": null,    \"txid\": \"029173d76253e3441f9dc26f91e6ef30dff486848e91a7941f0cacd0af25ee30\"  },  \"psbt\": \"cHNidP8BAFUBAAAAAak8uMR3UGkAGUKWsq8Mv45qg2fdD93JQRIsa2P0wFloAQAAAAD/////AQfgAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA3gIAAAAAAQFY9sVfEEbyjrHXSlxXDxL+71WOMnsPpVElwk+3E/J9vAAAAAAA/v///wIYZRIAAAAAABYAFBKYf7yF+ss6EFdw2rDZTfdLhep8eOABAAAAAAAWABQd6wBRnX8mBZiJYfvy/FGE+xKc+AJHMEQCIFSIkvEUI9yUgEw4JocRs1aiVsBlKKXrOQaQb3XFqR21AiBqiEVzCVVSRGjckyPDgAQBnOdSzBYR6Rw6KFcCP+E27wEhAwIlXdfM2WYnYa36Hp4MS6YkplBAgBsb1tYG9NiWFWTKzPYhAAEBH3jgAQAAAAAAFgAUHesAUZ1/JgWYiWH78vxRhPsSnPgiBgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6SxgTizKsVAAAgAEAAIAAAACAAAAAAAAAAAAAAA==\"}6a: export PSBT to environment-variable$ export PSBT=\"PASTE_PSBT_HERE\"Step 7: Sign Transaction (PSBT)$ bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor sign --psbt $PSBT  DON’T FORGET to COPY the PSBT for the next stepThe output below confirms the command was successful.{  \"is_finalized\": true,  \"psbt\": \"cHNidP8BAFUBAAAAAak8uMR3UGkAGUKWsq8Mv45qg2fdD93JQRIsa2P0wFloAQAAAAD/////AQfgAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA3gIAAAAAAQFY9sVfEEbyjrHXSlxXDxL+71WOMnsPpVElwk+3E/J9vAAAAAAA/v///wIYZRIAAAAAABYAFBKYf7yF+ss6EFdw2rDZTfdLhep8eOABAAAAAAAWABQd6wBRnX8mBZiJYfvy/FGE+xKc+AJHMEQCIFSIkvEUI9yUgEw4JocRs1aiVsBlKKXrOQaQb3XFqR21AiBqiEVzCVVSRGjckyPDgAQBnOdSzBYR6Rw6KFcCP+E27wEhAwIlXdfM2WYnYa36Hp4MS6YkplBAgBsb1tYG9NiWFWTKzPYhAAEBH3jgAQAAAAAAFgAUHesAUZ1/JgWYiWH78vxRhPsSnPgiAgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6S0gwRQIhALWkBRSJzxuf0od4tPu3qFmEfJ2Y+/QBGtfjSFObWsPeAiA4QJx8Rk5pacrjHv5EOdw6RNHXcdtepFs+m0/Za/h0UQEiBgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6SxgTizKsVAAAgAEAAIAAAACAAAAAAAAAAAABBwABCGwCSDBFAiEAtaQFFInPG5/Sh3i0+7eoWYR8nZj79AEa1+NIU5taw94CIDhAnHxGTmlpyuMe/kQ53DpE0ddx216kWz6bT9lr+HRRASED/NBaWlmEMxswpzSPW5V23outWKQJraHszEcaVbwSeksAAA==\"}7a: export signed psbt to environment variable$ export SIGNED_PSBT=\"Paste_PSBT_HERE\"Step 8: Broadcast Transaction$ bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor broadcast --psbt $SIGNED_ PSBTThe output below confirms the command was successful.{  \"txid\": \"a0877b7ce91ea6d141ba63277673f5bdf0edfdd45f91a39ba1a1ace15f839b52\"}   Verify transcation in the memory pool on testnet Mempool-testnet!  Finishing touch, run sync one more time and see that the balance has decreased.ResourcesOther Tutorials / Blog   My Summer of Bitcoin Experience    Useful links    BIP-32:  Hierarchical Deterministic Wallets  BIP: 39 - Mnemonic code for generating deterministic keys  BIP: 44 - Multi-Account Hierarchy for Deterministic Wallets      BIP: 84 - Derivation scheme for P2WPKH based accounts        BIP: 174 - Partially Signed Bitcoin Transaction Format    What are Descriptors and miniscript?      Master Private  Key and Extended Private Key    MinscA Miniscript-based scripting language for Bitcoin contracts",
            "content_html": "<h2 id=\"how-to-use-bdk-cli-basics\">How to use bdk-cli basics</h2><h3 id=\"tutorial-goals\">Tutorial Goals</h3><ul>  <li>My goal for this tutorial is to introduce you to <a href=\"https://github.com/bitcoindevkit/bdk-cli\">bdk-cli</a>, a powerful command-line program used for Bitcoin wallet testing. You will be exposed to many of the basic techincal skills that go into creating and managing Bitcoin wallets.</li>  <li>    <p>If you’ve read most of the <a href=\"https://github.com/bitcoinbook/bitcoinbook\">“Mastering Bitcoin”</a> book, this tutorial could serve as a stepping stone into your Bitcoin wallet development journey.</p>  </li>  <li>    <p>This short tutorial will expose you to the <a href=\"https://docs.rs/bdk/latest/bdk/\">bdk library </a> and the practical knowledge needed for Bitcoin wallet development.</p>  </li>  <li>You can create a custom modular wallet by using the <a href=\"https://github.com/bitcoindevkit/bdk-ffi\">Language Bindings</a> for <strong>Kotlin/Java, Swift, Python</strong> which enable the use of BDK’s <strong>Rust</strong> library as an API. You can later use these similar steps to create your own Bitcoin mobile, desktop or even WebApp.***</li></ul><h2 id=\"a-few-things-before-you-begin\">A few things before you begin:</h2><blockquote>  <p>Run this command to clear cache.This command is not needed if it’s your first time of using the <code class=\"language-plaintext highlighter-rouge\">bdk-cli.</code>This command clears the cache files located in the bdk-cli folder. <code class=\"language-plaintext highlighter-rouge\">rm -rf ~/.bdk-cli/</code></p></blockquote><ul>  <li>Three things to look out for in each step of the tutorial:    <ul>      <li>1) Commands for the Terminal or Shell start with the <code class=\"language-plaintext highlighter-rouge\">$</code> symbol</li>      <li>2) Preview of the command output. Note, not all commands will output code.</li>      <li>3) Preview Video of the tutorial for reference of what things should look like in action.</li>    </ul>  </li></ul><hr /><h3 id=\"outline-of-tutorial-and-installation-notes\">Outline of Tutorial and Installation notes:</h3><h3 id=\"brief-outline-of-tutorial\">Brief Outline of Tutorial</h3><ul>  <li>Step 1: Creating a mnemonic word list + XPRV (Extended Private Key)</li>  <li>Step 2: Generate testnet Receive Address</li>  <li>Step 3: Send funds to newly generated address</li>  <li>Step 4: Sync Wallet</li>  <li>Step 5: Check Balance of Wallet</li>  <li>Step 6: Create a Transaction (PSBT)</li>  <li>Step 7: Sign the Transaction (PSBT)</li>  <li>Step 8: Broadcast Transaction</li></ul><h3 id=\"to-follow-this-tutorial-you-will-need\">To follow this tutorial you will need:</h3><ul>  <li><strong>Linux</strong> or <strong>macOS</strong> device.</li>  <li>If on <strong>Windows</strong> instructions will slightly differ.</li></ul><hr /><h2 id=\"installation-pre-requisites\">Installation Pre-requisites</h2><h3 id=\"1-install-rust-and-cargo-\">1. Install Rust and Cargo :```</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></pre></div></div><h3 id=\"2-installl-sqlite3\">2. Installl <code class=\"language-plaintext highlighter-rouge\">sqlite3</code></h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>#sqlite is a database# Linux machine$ apt install sqlite-dev3# macOS machine$ brew sqlite</code></pre></div></div><h3 id=\"3-install-jq\">3. Install <code class=\"language-plaintext highlighter-rouge\">jq</code></h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># jq is a tool used for data parsing# linux machine$ apt install jq# macOS machine$ brew install jq</code></pre></div></div><blockquote>  <p>Note: If you need remove the cache wallet data at any time use this is the command.</p></blockquote><hr /><h3 id=\"bdk-cli-installation\"><code class=\"language-plaintext highlighter-rouge\">bdk-cli</code> installation:</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$  cargo install --features \"electrum,compiler\"  --version 0.6.0 bdk-cli</code></pre></div></div><h2 id=\"step-0-check-version-of-bdk-cli\">Step 0: Check Version of bdk-cli</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli -V</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># command output previewbdk-cli 0.5.0</code></pre></div></div><p><img src=\"https://i.imgur.com/IcuyeMS.gif\" alt=\"\" /></p><h3 id=\"preview-of-bdk-cli-help-menu\">Preview of bdk-cli help menu</h3><p>$<code class=\"language-plaintext highlighter-rouge\">bdk-cli --help</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># command output previewUSAGE:    bdk-cli [OPTIONS] &lt;SUBCOMMAND&gt;FLAGS:    -h, --help                   Prints help information    -V, --version                Prints version informationOPTIONS:    -d, --datadir &lt;DATADIR&gt;                Sets the wallet data directory. Default value : \"~/.bdk-bitcoin    -n, --network &lt;NETWORK&gt;                Sets the network [default: testnet]  [possible values: bitcoin, testnet, signet, regtest]SUBCOMMANDS:    compile    Compile a miniscript policy to an output descriptor    help       Prints this message or the help of the given subcommand(s)    key        Subcommands for Key operations    repl       Options to configure a SOCKS5 proxy for a blockchain client connection    wallet     Wallet subcommands that can be issued without a blockchain backend</code></pre></div></div><hr /><h2 id=\"step-1-seed-generate\">Step 1: Seed Generate</h2><h3 id=\"1a-mnemonic-word-list--xprv-exteneded-private-key-key\">1a: Mnemonic word-list + XPRV (Exteneded Private Key) :key:</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli key generate | tee key.json</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{  \"fingerprint\": \"42b15d2f\",  \"mnemonic\": \"party salon worth satoshi envelope suggest garlic dry add pitch throw clap keen narrow antique oyster ketchup purchase gasp visual work venue fog crater\",  \"xprv\": \"tprv8ZgxMBicQKsPdwpamtjqMFpYRTafnE1bN2SphLEybCtRKakk6S1TgQCsZgiBwJuJNWe3jYdgVCTsKf9weMxj6tW4zNNKWptykszJpS2L8wE\"}</code></pre></div></div><p><img src=\"https://i.imgur.com/ii62Hul.gif\" alt=\"\" /></p><hr /><h3 id=\"1b-save-xprv-extended-private-key-into-environment-variable\">1b: Save XPRV (Extended Private Key) into environment variable</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">export XPRV_00=$(cat key.json | jq -r .xprv)</code></p><p><img src=\"https://i.imgur.com/KYW2Cdo.gif\" alt=\"\" /></p><hr /><h3 id=\"1c-verify-environment-variable-xprv_00-is-active\">1c: Verify environment variable XPRV_00 is active</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">env | grep XPRV</code></p><p><img src=\"https://i.imgur.com/ZahbJwe.gif\" alt=\"\" /></p><hr /><h3 id=\"1d-create-descriptor-and-save-into-environment-variable\">1d: Create Descriptor and Save into environment variable</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">export my_descriptor=\"wpkh($XPRV_00/84h/1h/0h/0/*)\"</code></p><p><img src=\"https://i.imgur.com/UV4Vgsq.gif\" alt=\"\" /></p><hr /><h3 id=\"1e-verify-environment-variable-my_descriptor-is-active\">1e: Verify environment variable my_descriptor is active</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">env | grep my_descriptor</code></p><p><img src=\"https://i.imgur.com/s7ZeRQN.gif\" alt=\"\" /></p><hr /><h2 id=\"step-2-generate-receive-address\">Step 2: Generate Receive-Address</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor get_new_address</code></p><p><img src=\"https://i.imgur.com/P8PjTAo.gif\" alt=\"\" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> The output below confirms the command was successful.{  \"address\": \"tb1qrh4sq5va0unqtxyfv8al9lz3sna3988cj59uya\"}</code></pre></div></div><p>Note: If you get the error below just delete the folder cache.</p><p><code class=\"language-plaintext highlighter-rouge\">$ rm -rf ~/./bdk_cli/</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>### ERROR PREVIEW [2022-12-16T04:12:26Z ERROR bdk_cli] Descriptor checksum mismatch. Are you using a different descriptor for an already defined wallet name? (if you are not specifying the wallet name it is automatically named based on the descriptor)</code></pre></div></div><p>This erases the cache files located in the bdk-cli binary folder.Note: This happens when you name the wallet the same name as previous created wallet.</p><hr /><h2 id=\"step-3-send-testnet-bitcoin-to-the-newly-created-receive-address\">Step 3: Send testnet bitcoin to the newly created receive-address</h2><p>These Testnet faucets allow you to send funds to your newly created address.</p><ul>  <li><a href=\"https://testnet-faucet.mempool.co\">Bitcoin Testnet Faucet LINK#1</a></li>  <li><a href=\"https://bitcoinfaucet.uo1.net\">Bitcoin Testnet Faucet LINK#2</a></li></ul><hr /><h2 id=\"step-4-sync-the-wallet\">Step 4: Sync the wallet</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name  --descriptor $my_descriptor sync</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The output below confirms the command was successful.{}</code></pre></div></div><p><img src=\"https://i.imgur.com/WFYBgVB.gif\" alt=\"\" /></p><hr /><h2 id=\"step-5-check-the-balance\">Step 5: Check the balance</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name  --descriptor $my_descriptor get_balance </code></p><blockquote>  <p>Note: The balance will only show after the transaction has been confirmed in a block at least once.</p></blockquote><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The output below confirms the command was successful:{  \"satoshi\": 100000}</code></pre></div></div><p><img src=\"https://i.imgur.com/v8MAYB2.gif\" alt=\"\" /></p><hr /><h2 id=\"step-6-create-transaction-psbt\">Step 6: Create Transaction (PSBT)</h2><p>To create a PSBT (partially-signed-bitcoin-transaction) run  the command</p><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor create_tx --to mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt:50000</code></p><p><img src=\"https://i.imgur.com/EUCovcJ.gif\" alt=\"\" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> The output below confirms the command was successful.{  \"details\": {    \"confirmation_time\": null,    \"fee\": 113,    \"received\": 0,    \"sent\": 123000,    \"transaction\": null,    \"txid\": \"029173d76253e3441f9dc26f91e6ef30dff486848e91a7941f0cacd0af25ee30\"  },  \"psbt\": \"cHNidP8BAFUBAAAAAak8uMR3UGkAGUKWsq8Mv45qg2fdD93JQRIsa2P0wFloAQAAAAD/////AQfgAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA3gIAAAAAAQFY9sVfEEbyjrHXSlxXDxL+71WOMnsPpVElwk+3E/J9vAAAAAAA/v///wIYZRIAAAAAABYAFBKYf7yF+ss6EFdw2rDZTfdLhep8eOABAAAAAAAWABQd6wBRnX8mBZiJYfvy/FGE+xKc+AJHMEQCIFSIkvEUI9yUgEw4JocRs1aiVsBlKKXrOQaQb3XFqR21AiBqiEVzCVVSRGjckyPDgAQBnOdSzBYR6Rw6KFcCP+E27wEhAwIlXdfM2WYnYa36Hp4MS6YkplBAgBsb1tYG9NiWFWTKzPYhAAEBH3jgAQAAAAAAFgAUHesAUZ1/JgWYiWH78vxRhPsSnPgiBgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6SxgTizKsVAAAgAEAAIAAAACAAAAAAAAAAAAAAA==\"}</code></pre></div></div><hr /><h3 id=\"6a-export-psbt-to-environment-variable\">6a: export PSBT to environment-variable</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">export PSBT=\"PASTE_PSBT_HERE\"</code></p><p><img src=\"https://i.imgur.com/CEDKcPZ.gif\" alt=\"\" /></p><hr /><h2 id=\"step-7-sign-transaction-psbt\">Step 7: Sign Transaction (PSBT)</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor sign --psbt $PSBT</code></p><blockquote>  <p>DON’T FORGET to COPY the PSBT for the next step</p></blockquote><p><img src=\"https://i.imgur.com/f4o4Ce8.gif\" alt=\"\" /></p><p>The output below confirms the command was successful.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{  \"is_finalized\": true,  \"psbt\": \"cHNidP8BAFUBAAAAAak8uMR3UGkAGUKWsq8Mv45qg2fdD93JQRIsa2P0wFloAQAAAAD/////AQfgAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA3gIAAAAAAQFY9sVfEEbyjrHXSlxXDxL+71WOMnsPpVElwk+3E/J9vAAAAAAA/v///wIYZRIAAAAAABYAFBKYf7yF+ss6EFdw2rDZTfdLhep8eOABAAAAAAAWABQd6wBRnX8mBZiJYfvy/FGE+xKc+AJHMEQCIFSIkvEUI9yUgEw4JocRs1aiVsBlKKXrOQaQb3XFqR21AiBqiEVzCVVSRGjckyPDgAQBnOdSzBYR6Rw6KFcCP+E27wEhAwIlXdfM2WYnYa36Hp4MS6YkplBAgBsb1tYG9NiWFWTKzPYhAAEBH3jgAQAAAAAAFgAUHesAUZ1/JgWYiWH78vxRhPsSnPgiAgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6S0gwRQIhALWkBRSJzxuf0od4tPu3qFmEfJ2Y+/QBGtfjSFObWsPeAiA4QJx8Rk5pacrjHv5EOdw6RNHXcdtepFs+m0/Za/h0UQEiBgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6SxgTizKsVAAAgAEAAIAAAACAAAAAAAAAAAABBwABCGwCSDBFAiEAtaQFFInPG5/Sh3i0+7eoWYR8nZj79AEa1+NIU5taw94CIDhAnHxGTmlpyuMe/kQ53DpE0ddx216kWz6bT9lr+HRRASED/NBaWlmEMxswpzSPW5V23outWKQJraHszEcaVbwSeksAAA==\"}</code></pre></div></div><hr /><h3 id=\"7a-export-signed-psbt-to-environment-variable\">7a: export signed psbt to environment variable</h3><p>$ <code class=\"language-plaintext highlighter-rouge\">export SIGNED_PSBT=\"Paste_PSBT_HERE\"</code></p><p><img src=\"https://i.imgur.com/VJsl8zR.gif\" alt=\"\" /></p><hr /><h2 id=\"step-8-broadcast-transaction\">Step 8: Broadcast Transaction</h2><p>$ <code class=\"language-plaintext highlighter-rouge\">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor broadcast --psbt $SIGNED_ PSBT</code></p><p><img src=\"https://i.imgur.com/yQZZk0d.gif\" alt=\"\" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The output below confirms the command was successful.{  \"txid\": \"a0877b7ce91ea6d141ba63277673f5bdf0edfdd45f91a39ba1a1ace15f839b52\"} </code></pre></div></div><ul>  <li>Verify transcation in the memory pool on testnet <a href=\"https://mempool.space/testnet\">Mempool-testnet!</a></li></ul><blockquote>  <p>Finishing touch, run sync one more time and see that the balance has decreased.</p></blockquote><hr /><h2 id=\"resources\">Resources</h2><h3 id=\"other-tutorials--blog\">Other Tutorials / Blog</h3><ul>  <li><a href=\"https://blog.summerofbitcoin.org/sob-22-experience-bdk/\"> My Summer of Bitcoin Experience</a>    <h3 id=\"useful-links\">Useful links</h3>  </li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\">BIP-32:  Hierarchical Deterministic Wallets</a></li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\">BIP: 39 - Mnemonic code for generating deterministic keys</a></li>  <li><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\">BIP: 44 - Multi-Account Hierarchy for Deterministic Wallets</a></li>  <li>    <p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki\">BIP: 84 - Derivation scheme for P2WPKH based accounts</a></p>  </li>  <li>    <p><a href=\"https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki\">BIP: 174 - Partially Signed Bitcoin Transaction Format</a></p>  </li>  <li><a href=\"https://blog.summerofbitcoin.org/miniscript-policy-descriptors-hidden-powers-of-bitcoin/\">What are Descriptors and miniscript?</a></li>  <li>    <p><a href=\"https://bitcoin.stackexchange.com/questions/97242/bip39-tool-bip32-extended-private-key-vs-bip32-root-key\">Master Private  Key and Extended Private Key</a></p>  </li>  <li><a href=\"https://min.sc\">MinscA Miniscript-based scripting language for Bitcoin contracts</a></li></ul>",
            "url": "http://localhost:4000/bdk-cli-basics/",
            
            
            
            "tags": ["bdk","bdk-cli","tutorial"],
            
            "date_published": "2022-12-14T03:00:00+03:00",
            "date_modified": "2022-12-14T03:00:00+03:00",
            
                "author": "Peter"
            
        },
    
        {
            "id": "http://localhost:4000/bitcoin-dev-journey-22/",
            "title": "Bitcoin Developer Journey",
            "summary": null,
            "content_text": "My Journey into Bitcoin DevelopmentWho am I ?My name is Pedro, I reside in the USA and I’m currently pursuing a Computer Science degree. Some of my interests include Bitcoin, Programming, and Computer Science.  When I’m not studying or at the university, I focus on the acquiring skills that will allow me to continue to create and contribute to Bitcoin open-source software. And if you’re curious, when I’m on break I catch up on reading or play guitar for a few minutes every day.2022 My Goal become a Bitcoin OSS DevAfter my realization of how important Bitcoin is as a technology for society, I decided in late  2021 that I would focus on becoming a Bitcoin developer as my new year’s goal. I started the year searching for methods of how I could contribute as an open-source developer. I read the Mastering Bitcoin book, I read blogs from current Bitcoin developers. I made the attempt to learn various programming languages. About a month into the year, I realize my plan wasn’t defined enough. I decided to take some advice my brother proposed to me a few months back.My brother suggested I choose a single project instead of looking at three Bitcoin projects and try to keep up with the different programming languages.  I took his advice and updated my goals, “learn how to use Bitcoin Dev Kit and contribute by the end of year”.  Bitcoin Dev Kit (BDK) is an open-source library use to create Bitcoin wallet applications. I researched and read as much as I could about BDK. I also attempted the tutorials on BDK’s blog and failed terribly.  As I was learning BDK I noticed more and more knowledge gaps in my technical understanding of Bitcoin. This didn’t discourage me, it made me more curious to learn how Bitcoin functions. One day, as I’m scrolling through twitter I notice a Bitcoin meetup happening in about two weeks named  BitDevs LA .  Surprisingly, BitDevs LA guest speaker that weekend happened to be Steve from the Bitcoin Dev Kit team. This was my chance to learn more about BDK and ask questions, I decided to go.Bit Devs LA, My first Bitcoin meet upBitDevs LA was my first Bitcoin meetup, the guest speaker from Bitcoin Dev Kit gave updates on the project and also what their goals were this  year. One of their goals this year was to on-board new devs and projects.  The talk was followed by a Socratic seminar and shortly after we met up at local restaurant. I met Andrew from BitDevs LA who was nice enough to introduce me to Steve from BDK. Long story short, I asked Steve many questions on how I can start contributing. He recommended I continue reading documentation, follow the project on Github and start learning Rust, and when I was ready to contribute in any way that I could.  He also suggested that I apply to Summer of Bitcoin (Bitcoin Internship) next year since application deadline for this year was over. Please make sure to pay them a visit in sats if you happen to be in LA next time 😊.When I got home, I did a quick web search on Summer of Bitcoin and noticed the applications were still open. Even if the deadline was past the due date, I decided to create a proposal and submitted the Summer of Bitcoin application even if the due date was  past due. I thought to myself, what’s the worst they could say? No, try again next year? I applied anyway, I continued to learn more about BDK and Rust.  Bitcoin Dev Kit  BitDevs LASummer of Bitcoin InternshipA month later, I received a message from BDK for the Summer of Bitcoin internship. I could not believe my eyes; I was accepted to intern and be a part of Summer of Bitcoin `22. I had month before the internship started, I continued learn the tools I needed to be as prepared as possibly for the internship. I continued to work every day and learn more about BDK, this was my chance to learn and contribute. I don’t think I ever took a day off; every day is a chance to become better and more efficient. You receive, what you put into anything, you reap what you sow,  ran through my head.  You can read more about my Summer of Bitcoin experience here.  “My Summer of Bitcoin experience with BDK”  Summer of BitcoinMini-grant recipientAfter Summer of Bitcoin had finished, I didn’t want to stop contributing to BDK, so I continued to work on it as much time as I could.  At the time, I was working on weekends delivering for a local pizza shop. I noticed a Superlunar mini-grant post on twitter for developers. I decided to apply and was fortunate enough to receive a mini-grant to work on BDK. This allowed me to quit my weekend job, continue my journey as an entry developer for BDK, and continue to focus on school also. My latest contribution was an appendix entry for the Mastering Bitcoin Book on BDK features and a few examples of how to use the bdk-cli app for quick testing and demonstration using Bitcoin features.TabConf ‘22Tabconf is the best Bitcoin conference for developers, and aspiring contributors, or anyone who wants to get involved in the Bitcoin space. I had zero plans to assist Tabconf `22, but as event was approaching I came across a Bitcoin podcast named “Building Builders”. It’s hosted by Rod @bitkite with guest speaker Stephen from Bitcoin Design, he happened to be talking about TabConf ‘22. After listening to the podcast, I was convinced I had to attend TabConf.  The first day of Tabconf was named “Builder day”,a day for open-source Bitcoin projects to onboard and demo their projects to individuals that want to learn how to contribute to Bitcoin OSS. On builder day, I had the opportunity to help at the Bitcoin Dev Kit table. I assisted guests with BDK questions and troubleshoot when requested. Day 2 was filled with developer focused workshops. I met so many talented and inspiring Bitcoiners at the conference, being there makes you realize how important Bitcoin is to many individuals around the globe.  Tabconf is a great place to be at if you want to learn more technical details, attend workshops, and network with some of the brightest minds in the Bitcoin space.  TABCONF `23BitDevs Atlanta and Terminus Electric Money LabBefore TABCONF Autumn and I had the opportunity to go to Bitdevs Atlanta as guest speakers about our Summer of Bitcoin experience. Autumn is founder of Generation Bitcoin, a community of teens learning and contributing to Bitcoin.  BitDevs ATL is a Bitcoin meetup hosted by Stephen and Bryan who are also founders of Terminus Electric Money Laboratory which is a Bitcoin and Lightning hackerspace (workspace). Please make sure to pay them a visit in your  sats-mobile if you happen to be in Atlanta.  Generation Bitcoin  BitDevs ATL  Terminus Electric Money LabPacific Bitcoin ‘22This year, I also had the opportunity to attend Pacific Bitcoin ‘22 and let me tell you it was pure signal. Everyone I met there was working on Bitcoin, an educator, or was passionate  HODL’r and Bitcoin advocate. I was lucky  to meet a few of the Swan Team Bitcoiners who work in different areas in the Bitcoin space. It was my first time meeting the Swan Team and I can tell they are like a Bitcoin family. PB ’22 was a great experience, I had the chance to listen to many Bitcoiners perspectives, their ambitions, and their goals. What do you mean a bear market ? Bitcoiners are still building. 😊      Pacific Bitcoin ‘23  End of the Year ReflectionsThis is just the beginning of my developer journey. This year has been better than I could have ever hoped for. I accomplished a lot more than I thought I would, and less than I wish I could.  There is still much to learn and contribute to in the Bitcoin space. My hope is that you are encouraged to take the leap of faith and make it your goal to contribute to Bitcoin for next year and if you can get involved in your local communities.  Whether that is through education, art, advocacy, development, ux or assisting in Bitcoin meetups. I’m still relatively new to the Bitcoin space and development, but if you have any questions feel free to reach out. If you have a passion for Bitcoin, like being challenged, and enjoy proof of work Bitcoin is for you 😊.Until next time. Stay humble and stack Sats!Bitcoin Open Source Projects and CommunitiesBitcoin Dev KitLightning Dev KitBitcoin DesignSummer of Bitcoin",
            "content_html": "<h1 id=\"my-journey-into-bitcoin-development\">My Journey into Bitcoin Development</h1><h3 id=\"who-am-i-\">Who am I ?</h3><p>My name is Pedro, I reside in the USA and I’m currently pursuing a Computer Science degree. Some of my interests include Bitcoin, Programming, and Computer Science.  When I’m not studying or at the university, I focus on the acquiring skills that will allow me to continue to create and contribute to Bitcoin open-source software. And if you’re curious, when I’m on break I catch up on reading or play guitar for a few minutes every day.</p><hr /><h3 id=\"2022-my-goal-become-a-bitcoin-oss-dev\">2022 My Goal become a Bitcoin OSS Dev</h3><p>After my realization of how important Bitcoin is as a technology for society, I decided in late  2021 that I would focus on becoming a Bitcoin developer as my new year’s goal. I started the year searching for methods of how I could contribute as an open-source developer. I read the Mastering Bitcoin book, I read blogs from current Bitcoin developers. I made the attempt to learn various programming languages. About a month into the year, I realize my plan wasn’t defined enough. I decided to take some advice my brother proposed to me a few months back.</p><p>My brother suggested I choose a single project instead of looking at three Bitcoin projects and try to keep up with the different programming languages.  I took his advice and updated my goals, “learn how to use Bitcoin Dev Kit and contribute by the end of year”.  Bitcoin Dev Kit (BDK) is an open-source library use to create Bitcoin wallet applications. I researched and read as much as I could about BDK. I also attempted the tutorials on BDK’s blog and failed terribly.  As I was learning BDK I noticed more and more knowledge gaps in my technical understanding of Bitcoin. This didn’t discourage me, it made me more curious to learn how Bitcoin functions. One day, as I’m scrolling through twitter I notice a Bitcoin meetup happening in about two weeks named  <em>BitDevs LA</em> .  Surprisingly, BitDevs LA guest speaker that weekend happened to be Steve from the Bitcoin Dev Kit team. This was my chance to learn more about BDK and ask questions, I decided to go.</p><hr /><h3 id=\"bit-devs-la-my-first-bitcoin-meet-up\">Bit Devs LA, My first Bitcoin meet up</h3><p>BitDevs LA was my first Bitcoin meetup, the guest speaker from Bitcoin Dev Kit gave updates on the project and also what their goals were this  year. One of their goals this year was to on-board new devs and projects.  The talk was followed by a Socratic seminar and shortly after we met up at local restaurant. I met Andrew from BitDevs LA who was nice enough to introduce me to Steve from BDK. Long story short, I asked Steve many questions on how I can start contributing. He recommended I continue reading documentation, follow the project on Github and start learning Rust, and when I was ready to contribute in any way that I could.  He also suggested that I apply to Summer of Bitcoin (Bitcoin Internship) next year since application deadline for this year was over. Please make sure to pay them a visit in sats if you happen to be in LA next time 😊.</p><p>When I got home, I did a quick web search on Summer of Bitcoin and noticed the applications were still open. Even if the deadline was past the due date, I decided to create a proposal and submitted the Summer of Bitcoin application even if the due date was  past due. I thought to myself, what’s the worst they could say? No, try again next year? I applied anyway, I continued to learn more about BDK and Rust.</p><ul>  <li><a href=\"https://bitcoindevkit.org/\">Bitcoin Dev Kit</a></li>  <li><a href=\"https://bitdevsla.org/\">BitDevs LA</a></li></ul><hr /><h3 id=\"summer-of-bitcoin-internship\">Summer of Bitcoin Internship</h3><p>A month later, I received a message from BDK for the Summer of Bitcoin internship. I could not believe my eyes; I was accepted to intern and be a part of Summer of Bitcoin `22. I had month before the internship started, I continued learn the tools I needed to be as prepared as possibly for the internship. I continued to work every day and learn more about BDK, this was my chance to learn and contribute. I don’t think I ever took a day off; every day is a chance to become better and more efficient. You receive, what you put into anything, you reap what you sow,  ran through my head.  You can read more about my Summer of Bitcoin experience here.</p><ul>  <li><a href=\"https://blog.summerofbitcoin.org/sob-22-experience-bdk/\">“My Summer of Bitcoin experience with BDK”</a></li>  <li><a href=\"https://www.summerofbitcoin.org/\">Summer of Bitcoin</a></li></ul><hr /><h3 id=\"mini-grant-recipient\">Mini-grant recipient</h3><p>After Summer of Bitcoin had finished, I didn’t want to stop contributing to BDK, so I continued to work on it as much time as I could.  At the time, I was working on weekends delivering for a local pizza shop. I noticed a Superlunar mini-grant post on twitter for developers. I decided to apply and was fortunate enough to receive a mini-grant to work on BDK. This allowed me to quit my weekend job, continue my journey as an entry developer for BDK, and continue to focus on school also. My latest contribution was an appendix entry for the Mastering Bitcoin Book on BDK features and a few examples of how to use the bdk-cli app for quick testing and demonstration using Bitcoin features.</p><hr /><h3 id=\"tabconf-22\">TabConf ‘22</h3><p>Tabconf is the best Bitcoin conference for developers, and aspiring contributors, or anyone who wants to get involved in the Bitcoin space. I had zero plans to assist Tabconf `22, but as event was approaching I came across a Bitcoin podcast named “Building Builders”. It’s hosted by Rod @bitkite with guest speaker Stephen from Bitcoin Design, he happened to be talking about TabConf ‘22. After listening to the podcast, I was convinced I had to attend TabConf.  The first day of Tabconf was named “Builder day”,a day for open-source Bitcoin projects to onboard and demo their projects to individuals that want to learn how to contribute to Bitcoin OSS. On builder day, I had the opportunity to help at the Bitcoin Dev Kit table. I assisted guests with BDK questions and troubleshoot when requested. Day 2 was filled with developer focused workshops. I met so many talented and inspiring Bitcoiners at the conference, being there makes you realize how important Bitcoin is to many individuals around the globe.  Tabconf is a great place to be at if you want to learn more technical details, attend workshops, and network with some of the brightest minds in the Bitcoin space.</p><ul>  <li><a href=\"https://2023.tabconf.com/\">TABCONF `23</a></li></ul><h3 id=\"bitdevs-atlanta-and-terminus-electric-money-lab\">BitDevs Atlanta and Terminus Electric Money Lab</h3><p>Before TABCONF Autumn and I had the opportunity to go to Bitdevs Atlanta as guest speakers about our Summer of Bitcoin experience. Autumn is founder of Generation Bitcoin, a community of teens learning and contributing to Bitcoin.  BitDevs ATL is a Bitcoin meetup hosted by Stephen and Bryan who are also founders of Terminus Electric Money Laboratory which is a Bitcoin and Lightning hackerspace (workspace). Please make sure to pay them a visit in your  sats-mobile if you happen to be in Atlanta.</p><ul>  <li><a href=\"https://genbitcoin.org/\">Generation Bitcoin</a></li>  <li><a href=\"https://atlantabitdevs.org/\">BitDevs ATL</a></li>  <li><a href=\"https://terminus.money/\">Terminus Electric Money Lab</a></li></ul><hr /><h3 id=\"pacific-bitcoin-22\">Pacific Bitcoin ‘22</h3><p>This year, I also had the opportunity to attend Pacific Bitcoin ‘22 and let me tell you it was pure signal. Everyone I met there was working on Bitcoin, an educator, or was passionate  HODL’r and Bitcoin advocate. I was lucky  to meet a few of the Swan Team Bitcoiners who work in different areas in the Bitcoin space. It was my first time meeting the Swan Team and I can tell they are like a Bitcoin family. PB ’22 was a great experience, I had the chance to listen to many Bitcoiners perspectives, their ambitions, and their goals. What do you mean a bear market ? Bitcoiners are still building. 😊</p><ul>  <li>    <h2 id=\"pacific-bitcoin-23\"><a href=\"https://www.pacificbitcoin.com/\">Pacific Bitcoin ‘23</a></h2>  </li></ul><h3 id=\"end-of-the-year-reflections\">End of the Year Reflections</h3><p>This is just the beginning of my developer journey. This year has been better than I could have ever hoped for. I accomplished a lot more than I thought I would, and less than I wish I could.  There is still much to learn and contribute to in the Bitcoin space. My hope is that you are encouraged to take the leap of faith and make it your goal to contribute to Bitcoin for next year and if you can get involved in your local communities.  Whether that is through education, art, advocacy, development, ux or assisting in Bitcoin meetups. I’m still relatively new to the Bitcoin space and development, but if you have any questions feel free to reach out. If you have a passion for Bitcoin, like being challenged, and enjoy proof of work Bitcoin is for you 😊.Until next time. Stay humble and stack Sats!</p><p>Bitcoin Open Source Projects and Communities</p><p><a href=\"https://bitcoindevkit.org/\">Bitcoin Dev Kit</a><a href=\"https://lightningdevkit.org/\">Lightning Dev Kit</a><a href=\"https://bitcoin.design/\">Bitcoin Design</a><a href=\"https://www.summerofbitcoin.org/\">Summer of Bitcoin</a></p>",
            "url": "http://localhost:4000/bitcoin-dev-journey-22/",
            
            
            
            "tags": ["bdk","summerofbitcion"],
            
            "date_published": "2022-12-13T03:00:00+03:00",
            "date_modified": "2022-12-13T03:00:00+03:00",
            
                "author": "Peter"
            
        }
    
    ]
}