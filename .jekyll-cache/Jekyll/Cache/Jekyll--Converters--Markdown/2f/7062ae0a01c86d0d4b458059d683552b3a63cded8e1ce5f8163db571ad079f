I"Æ?<h2 id="how-to-use-bdk-cli-basics">How to use bdk-cli basics</h2>
<h3 id="tutorial-goals">Tutorial Goals</h3>

<ul>
  <li>My goal for this tutorial is to introduce you to <a href="https://github.com/bitcoindevkit/bdk-cli">bdk-cli</a>, a powerful command-line program used for Bitcoin wallet testing. You will be exposed to many of the basic techincal skills that go into creating and managing Bitcoin wallets.</li>
  <li>
    <p>If you‚Äôve read most of the <a href="https://github.com/bitcoinbook/bitcoinbook">‚ÄúMastering Bitcoin‚Äù</a> book, this tutorial could serve as a stepping stone into your Bitcoin wallet development journey.</p>
  </li>
  <li>
    <p>This short tutorial will expose you to the <a href="https://docs.rs/bdk/latest/bdk/">bdk library </a> and the practical knowledge needed for Bitcoin wallet development.</p>
  </li>
  <li>You can create a custom modular wallet by using the <a href="https://github.com/bitcoindevkit/bdk-ffi">Language Bindings</a> for <strong>Kotlin/Java, Swift, Python</strong> which enable the use of BDK‚Äôs <strong>Rust</strong> library as an API. You can later use these similar steps to create your own Bitcoin mobile, desktop or even WebApp.
***</li>
</ul>

<h2 id="a-few-things-before-you-begin">A few things before you begin:</h2>
<blockquote>
  <p>Run this command to clear cache.
This command is not needed if it‚Äôs your first time of using the <code class="language-plaintext highlighter-rouge">bdk-cli.</code>
This command clears the cache files located in the bdk-cli folder. <code class="language-plaintext highlighter-rouge">rm -rf ~/.bdk-cli/</code></p>
</blockquote>

<ul>
  <li>Three things to look out for in each step of the tutorial:
    <ul>
      <li>1) Commands for the Terminal or Shell start with the <code class="language-plaintext highlighter-rouge">$</code> symbol</li>
      <li>2) Preview of the command output. Note, not all commands will output code.</li>
      <li>3) Preview Video of the tutorial for reference of what things should look like in action.</li>
    </ul>
  </li>
</ul>

<hr />
<h3 id="outline-of-tutorial-and-installation-notes">Outline of Tutorial and Installation notes:</h3>

<h3 id="brief-outline-of-tutorial">Brief Outline of Tutorial</h3>
<ul>
  <li>Step 1: Creating a mnemonic word list + XPRV (Extended Private Key)</li>
  <li>Step 2: Generate testnet Receive Address</li>
  <li>Step 3: Send funds to newly generated address</li>
  <li>Step 4: Sync Wallet</li>
  <li>Step 5: Check Balance of Wallet</li>
  <li>Step 6: Create a Transaction (PSBT)</li>
  <li>Step 7: Sign the Transaction (PSBT)</li>
  <li>Step 8: Broadcast Transaction</li>
</ul>

<h3 id="to-follow-this-tutorial-you-will-need">To follow this tutorial you will need:</h3>

<ul>
  <li><strong>Linux</strong> or <strong>macOS</strong> device.</li>
  <li>If on <strong>Windows</strong> instructions will slightly differ.</li>
</ul>

<hr />
<h2 id="installation-pre-requisites">Installation Pre-requisites</h2>
<h3 id="1-install-rust-and-cargo-">1. Install Rust and Cargo :```</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
</code></pre></div></div>
<h3 id="2-installl-sqlite3">2. Installl <code class="language-plaintext highlighter-rouge">sqlite3</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#sqlite is a database

# Linux machine
$ apt install sqlite-dev3

# macOS machine
$ brew sqlite
</code></pre></div></div>

<h3 id="3-install-jq">3. Install <code class="language-plaintext highlighter-rouge">jq</code></h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># jq is a tool used for data parsing

# linux machine
$ apt install jq

# macOS machine
$ brew install jq

</code></pre></div></div>

<blockquote>
  <p>Note: If you need remove the cache wallet data at any time use this is the command.</p>
</blockquote>

<hr />
<h3 id="bdk-cli-installation"><code class="language-plaintext highlighter-rouge">bdk-cli</code> installation:</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$  cargo install --features "electrum,compiler"  --version 0.6.0 bdk-cli
</code></pre></div></div>

<h2 id="step-0-check-version-of-bdk-cli">Step 0: Check Version of bdk-cli</h2>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli -V</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># command output preview

bdk-cli 0.5.0
</code></pre></div></div>

<p><img src="https://i.imgur.com/IcuyeMS.gif" alt="" /></p>

<h3 id="preview-of-bdk-cli-help-menu">Preview of bdk-cli help menu</h3>

<p>$<code class="language-plaintext highlighter-rouge">bdk-cli --help</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># command output preview

USAGE:
    bdk-cli [OPTIONS] &lt;SUBCOMMAND&gt;

FLAGS:
    -h, --help       
            Prints help information

    -V, --version    
            Prints version information


OPTIONS:
    -d, --datadir &lt;DATADIR&gt;    
            Sets the wallet data directory. Default value : "~/.bdk-bitcoin

    -n, --network &lt;NETWORK&gt;    
            Sets the network [default: testnet]  [possible values: bitcoin, testnet, signet, regtest]


SUBCOMMANDS:
    compile    Compile a miniscript policy to an output descriptor
    help       Prints this message or the help of the given subcommand(s)
    key        Subcommands for Key operations
    repl       Options to configure a SOCKS5 proxy for a blockchain client connection
    wallet     Wallet subcommands that can be issued without a blockchain backend


</code></pre></div></div>
<hr />

<h2 id="step-1-seed-generate">Step 1: Seed Generate</h2>

<h3 id="1a-mnemonic-word-list--xprv-exteneded-private-key-key">1a: Mnemonic word-list + XPRV (Exteneded Private Key) :key:</h3>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli key generate | tee key.json</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "fingerprint": "42b15d2f",
  "mnemonic": "party salon worth satoshi envelope suggest garlic dry add pitch throw clap keen narrow antique oyster ketchup purchase gasp visual work venue fog crater",
  "xprv": "tprv8ZgxMBicQKsPdwpamtjqMFpYRTafnE1bN2SphLEybCtRKakk6S1TgQCsZgiBwJuJNWe3jYdgVCTsKf9weMxj6tW4zNNKWptykszJpS2L8wE"
}

</code></pre></div></div>

<p><img src="https://i.imgur.com/ii62Hul.gif" alt="" /></p>

<hr />
<h3 id="1b-save-xprv-extended-private-key-into-environment-variable">1b: Save XPRV (Extended Private Key) into environment variable</h3>
<p>$ <code class="language-plaintext highlighter-rouge">export XPRV_00=$(cat key.json | jq -r .xprv)</code></p>

<p><img src="https://i.imgur.com/KYW2Cdo.gif" alt="" /></p>

<hr />
<h3 id="1c-verify-environment-variable-xprv_00-is-active">1c: Verify environment variable XPRV_00 is active</h3>
<p>$ <code class="language-plaintext highlighter-rouge">env | grep XPRV</code></p>

<p><img src="https://i.imgur.com/ZahbJwe.gif" alt="" /></p>

<hr />
<h3 id="1d-create-descriptor-and-save-into-environment-variable">1d: Create Descriptor and Save into environment variable</h3>

<p>$ <code class="language-plaintext highlighter-rouge">export my_descriptor="wpkh($XPRV_00/84h/1h/0h/0/*)"</code></p>

<p><img src="https://i.imgur.com/UV4Vgsq.gif" alt="" /></p>

<hr />
<h3 id="1e-verify-environment-variable-my_descriptor-is-active">1e: Verify environment variable my_descriptor is active</h3>

<p>$ <code class="language-plaintext highlighter-rouge">env | grep my_descriptor</code></p>

<p><img src="https://i.imgur.com/s7ZeRQN.gif" alt="" /></p>

<hr />
<h2 id="step-2-generate-receive-address">Step 2: Generate Receive-Address</h2>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor get_new_address</code></p>

<p><img src="https://i.imgur.com/P8PjTAo.gif" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> The output below confirms the command was successful.

{
  "address": "tb1qrh4sq5va0unqtxyfv8al9lz3sna3988cj59uya"
}
</code></pre></div></div>

<p>Note: If you get the error below just delete the folder cache.</p>

<p><code class="language-plaintext highlighter-rouge">$ rm -rf ~/./bdk_cli/</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### ERROR PREVIEW 

[2022-12-16T04:12:26Z ERROR bdk_cli] Descriptor checksum mismatch. Are you using a different descriptor for an already defined wallet name? (if you are not specifying the wallet name it is automatically named based on the descriptor)


</code></pre></div></div>

<p>This erases the cache files located in the bdk-cli binary folder.
Note: This happens when you name the wallet the same name as previous created wallet.</p>

<hr />
<h2 id="step-3-send-testnet-bitcoin-to-the-newly-created-receive-address">Step 3: Send testnet bitcoin to the newly created receive-address</h2>

<p>These Testnet faucets allow you to send funds to your newly created address.</p>
<ul>
  <li><a href="https://testnet-faucet.mempool.co">Bitcoin Testnet Faucet LINK#1</a></li>
  <li><a href="https://bitcoinfaucet.uo1.net">Bitcoin Testnet Faucet LINK#2</a></li>
</ul>

<hr />
<h2 id="step-4-sync-the-wallet">Step 4: Sync the wallet</h2>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli wallet --wallet wallet_name  --descriptor $my_descriptor sync</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The output below confirms the command was successful.

{}
</code></pre></div></div>

<p><img src="https://i.imgur.com/WFYBgVB.gif" alt="" /></p>

<hr />
<h2 id="step-5-check-the-balance">Step 5: Check the balance</h2>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli wallet --wallet wallet_name  --descriptor $my_descriptor get_balance </code></p>

<blockquote>
  <p>Note: The balance will only show after the transaction has been confirmed in a block at least once.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The output below confirms the command was successful:

{
  "satoshi": 100000
}

</code></pre></div></div>

<p><img src="https://i.imgur.com/v8MAYB2.gif" alt="" /></p>

<hr />
<h2 id="step-6-create-transaction-psbt">Step 6: Create Transaction (PSBT)</h2>

<p>To create a PSBT (partially-signed-bitcoin-transaction) run  the command</p>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor create_tx --to mkHS9ne12qx9pS9VojpwU5xtRd4T7X7ZUt:50000</code></p>

<p><img src="https://i.imgur.com/EUCovcJ.gif" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> The output below confirms the command was successful.

{
  "details": {
    "confirmation_time": null,
    "fee": 113,
    "received": 0,
    "sent": 123000,
    "transaction": null,
    "txid": "029173d76253e3441f9dc26f91e6ef30dff486848e91a7941f0cacd0af25ee30"
  },
  "psbt": "cHNidP8BAFUBAAAAAak8uMR3UGkAGUKWsq8Mv45qg2fdD93JQRIsa2P0wFloAQAAAAD/////AQfgAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA3gIAAAAAAQFY9sVfEEbyjrHXSlxXDxL+71WOMnsPpVElwk+3E/J9vAAAAAAA/v///wIYZRIAAAAAABYAFBKYf7yF+ss6EFdw2rDZTfdLhep8eOABAAAAAAAWABQd6wBRnX8mBZiJYfvy/FGE+xKc+AJHMEQCIFSIkvEUI9yUgEw4JocRs1aiVsBlKKXrOQaQb3XFqR21AiBqiEVzCVVSRGjckyPDgAQBnOdSzBYR6Rw6KFcCP+E27wEhAwIlXdfM2WYnYa36Hp4MS6YkplBAgBsb1tYG9NiWFWTKzPYhAAEBH3jgAQAAAAAAFgAUHesAUZ1/JgWYiWH78vxRhPsSnPgiBgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6SxgTizKsVAAAgAEAAIAAAACAAAAAAAAAAAAAAA=="
}

</code></pre></div></div>

<hr />

<h3 id="6a-export-psbt-to-environment-variable">6a: export PSBT to environment-variable</h3>

<p>$ <code class="language-plaintext highlighter-rouge">export PSBT="PASTE_PSBT_HERE"</code></p>

<p><img src="https://i.imgur.com/CEDKcPZ.gif" alt="" /></p>

<hr />
<h2 id="step-7-sign-transaction-psbt">Step 7: Sign Transaction (PSBT)</h2>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor sign --psbt $PSBT</code></p>

<blockquote>
  <p>DON‚ÄôT FORGET to COPY the PSBT for the next step</p>
</blockquote>

<p><img src="https://i.imgur.com/f4o4Ce8.gif" alt="" /></p>

<p>The output below confirms the command was successful.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "is_finalized": true,
  "psbt": "cHNidP8BAFUBAAAAAak8uMR3UGkAGUKWsq8Mv45qg2fdD93JQRIsa2P0wFloAQAAAAD/////AQfgAQAAAAAAGXapFDRKD0jKFQ7CuQOBdmC5tosTpnAmiKwAAAAAAAEA3gIAAAAAAQFY9sVfEEbyjrHXSlxXDxL+71WOMnsPpVElwk+3E/J9vAAAAAAA/v///wIYZRIAAAAAABYAFBKYf7yF+ss6EFdw2rDZTfdLhep8eOABAAAAAAAWABQd6wBRnX8mBZiJYfvy/FGE+xKc+AJHMEQCIFSIkvEUI9yUgEw4JocRs1aiVsBlKKXrOQaQb3XFqR21AiBqiEVzCVVSRGjckyPDgAQBnOdSzBYR6Rw6KFcCP+E27wEhAwIlXdfM2WYnYa36Hp4MS6YkplBAgBsb1tYG9NiWFWTKzPYhAAEBH3jgAQAAAAAAFgAUHesAUZ1/JgWYiWH78vxRhPsSnPgiAgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6S0gwRQIhALWkBRSJzxuf0od4tPu3qFmEfJ2Y+/QBGtfjSFObWsPeAiA4QJx8Rk5pacrjHv5EOdw6RNHXcdtepFs+m0/Za/h0UQEiBgP80FpaWYQzGzCnNI9blXbei61YpAmtoezMRxpVvBJ6SxgTizKsVAAAgAEAAIAAAACAAAAAAAAAAAABBwABCGwCSDBFAiEAtaQFFInPG5/Sh3i0+7eoWYR8nZj79AEa1+NIU5taw94CIDhAnHxGTmlpyuMe/kQ53DpE0ddx216kWz6bT9lr+HRRASED/NBaWlmEMxswpzSPW5V23outWKQJraHszEcaVbwSeksAAA=="
}

</code></pre></div></div>

<hr />
<h3 id="7a-export-signed-psbt-to-environment-variable">7a: export signed psbt to environment variable</h3>

<p>$ <code class="language-plaintext highlighter-rouge">export SIGNED_PSBT="Paste_PSBT_HERE"</code></p>

<p><img src="https://i.imgur.com/VJsl8zR.gif" alt="" /></p>

<hr />
<h2 id="step-8-broadcast-transaction">Step 8: Broadcast Transaction</h2>

<p>$ <code class="language-plaintext highlighter-rouge">bdk-cli wallet --wallet wallet_name --descriptor $my_descriptor broadcast --psbt $SIGNED_ PSBT</code></p>

<p><img src="https://i.imgur.com/yQZZk0d.gif" alt="" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The output below confirms the command was successful.

{
  "txid": "a0877b7ce91ea6d141ba63277673f5bdf0edfdd45f91a39ba1a1ace15f839b52"
}
 

</code></pre></div></div>

<ul>
  <li>Verify transcation in the memory pool on testnet <a href="https://mempool.space/testnet">Mempool-testnet!</a></li>
</ul>

<blockquote>
  <p>Finishing touch, run sync one more time and see that the balance has decreased.</p>
</blockquote>

<hr />
<h2 id="resources">Resources</h2>

<h3 id="other-tutorials--blog">Other Tutorials / Blog</h3>

<ul>
  <li><a href="https://blog.summerofbitcoin.org/sob-22-experience-bdk/"> My Summer of Bitcoin Experience</a>
    <h3 id="useful-links">Useful links</h3>
  </li>
  <li><a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">BIP-32:  Hierarchical Deterministic Wallets</a></li>
  <li><a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">BIP: 39 - Mnemonic code for generating deterministic keys</a></li>
  <li><a href="https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki">BIP: 44 - Multi-Account Hierarchy for Deterministic Wallets</a></li>
  <li>
    <p><a href="https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki">BIP: 84 - Derivation scheme for P2WPKH based accounts</a></p>
  </li>
  <li>
    <p><a href="https://github.com/bitcoin/bips/blob/master/bip-0174.mediawiki">BIP: 174 - Partially Signed Bitcoin Transaction Format</a></p>
  </li>
  <li><a href="https://blog.summerofbitcoin.org/miniscript-policy-descriptors-hidden-powers-of-bitcoin/">What are Descriptors and miniscript?</a></li>
  <li>
    <p><a href="https://bitcoin.stackexchange.com/questions/97242/bip39-tool-bip32-extended-private-key-vs-bip32-root-key">Master Private  Key and Extended Private Key</a></p>
  </li>
  <li><a href="https://min.sc">MinscA Miniscript-based scripting language for Bitcoin contracts</a></li>
</ul>
:ET